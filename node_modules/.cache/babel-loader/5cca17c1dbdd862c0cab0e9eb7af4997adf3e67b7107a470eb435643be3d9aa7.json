{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dice from './Dice';\nimport Modal from './Modal';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [rollScore, setRollScore] = useState(0);\n  const [rollCondition, setRollCondition] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\n  const [turnScore, setTurnScore] = useState(0);\n  const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\n  const [numberOfDice, setNumberOfDice] = useState(6);\n  const [diceCount, setDiceCount] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(true);\n  const [players, setPlayers] = useState([]);\n  const [totalScore, setTotalScore] = useState([]);\n  const [playerInGame, setPlayerInGame] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\n  const currentPlayer = players[currentPlayerIndex];\n  const handleCloseModal = () => {\n    // Maneja la ventana de ingreso de jugadores\n    setIsModalOpen(false);\n  };\n  const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => {\n    // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\n    setPlayers(playerNames);\n    setTotalScore(playerScores);\n    setPlayerInGame(inGame);\n  };\n  useEffect(() => {\n    // Entrada al \"Juego\"\n    if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) {\n      // El jugador ingresa al juego\n      const updatePlayerInGame = [...playerInGame];\n      updatePlayerInGame[currentPlayerIndex] = true;\n      setPlayerInGame(updatePlayerInGame);\n      alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\n\n      // Finaliza el turno para el jugador recién ingresado al juego\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n      alert(\"Tu turno ha finalizado!\");\n    }\n\n    // Ganar el juego\n    if (totalScore[currentScoreIndex] + turnScore === 10000) {\n      const updateGameState = true;\n      setGameOver(updateGameState);\n      alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\");\n    } else if (totalScore[currentScoreIndex] + turnScore > 10000) {\n      const updateGameState = true;\n      setMaximumPointsSupperpassed(updateGameState);\n      alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\n    }\n  }, [turnScore]);\n  const rollDice = () => {\n    // Tirar los dados\n\n    // Verificar si el jugador está dentro del juego para permitir más tiradas\n    if (roll === 1 && turnScore < 700 && !playerInGame[currentPlayerIndex]) {\n      alert(\"No puedes tirar más los dados, no estás dentro del juego\");\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n    } else {\n      // CREAR UN HAVEDICE CON USESTATE 6 Y PONER EN CADA SUMA DE PUNTAJES UN SETHAVEDICE QUE MODIFIQUE EL VALOR - \n      // MODIFICAR EL IF Y HACERLO UN FOR QUE RECORRA DEL 1 AL 6 Y SI SE CUMPLE LA CONDICION DE QUE i === HAVEDICE, SETEAR NUMBEROFDICE CON ESE VALOR, LUEGO BREAK - \n      // SI SUMA UN DADO SOLO, VOLVER A SETEAR A 6 - CUANDO TERMINA EL TURNO SETEAR HAVEDICE A 6 - CAMBIAR [...Array(6)] POR [...Array(numberOfDice)]\n\n      // Generar números aleatorios para cada dado\n      const diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1);\n\n      // Actualizar valores de los dados\n      setDiceValues(diceAmount);\n\n      // Contador de cada número del 1 al 6\n      const count = [0, 0, 0, 0, 0, 0];\n      diceAmount.forEach(value => {\n        count[value - 1]++;\n      });\n\n      // Calcular puntaje de la tirada\n      let newRollScore = 0;\n\n      // Puntajes según las combinaciones de dados\n      switch (diceAmount.length) {\n        // Cada Case depende de la cantidad de dados tirados\n\n        case 6:\n          // 6 dados iguales\n          if (count[0] === 6) {\n            // Seis dados de 1\n            newRollScore += 6000;\n            break;\n          } else if (count[4] === 6) {\n            // Seis dados de 5\n            newRollScore += 3000;\n            break;\n          } else {\n            // Seis dados de 2, 3, 4 o 6\n            let foundSixDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 6) {\n                newRollScore += (i + 1) * 600;\n                foundSixDice = true;\n                break;\n              }\n            }\n            if (foundSixDice) {\n              break;\n            }\n          }\n\n          // 5 dados iguales\n          if (count[0] === 5 && count[4] === 1) {\n            // Cinco dados de 1 y un dado de 5\n            newRollScore += 4050;\n            break;\n          } else if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 5 && count[0] === 1) {\n            // Cinco dados de 5 y un dado de 1\n            newRollScore += 2100;\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5 && count[0] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 400 + 100;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5 && count[4] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 400 + 50;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                const diceRemaining = 1;\n                setNumberOfDice(diceRemaining);\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 2) {\n            // Cuatro dados de 1 y dos dados de 5\n            newRollScore += 2100;\n            break;\n          } else if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            const diceRemaining = 2;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 4 && count[0] === 2) {\n            // Cuatro dados de 5 y dos dados de 1\n            newRollScore += 1200;\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            const diceRemaining = 2;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\n                newRollScore += (i + 1) * 200 + 200;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\n                newRollScore += (i + 1) * 200 + 150;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                const diceRemaining = 1;\n                setNumberOfDice(diceRemaining);\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                const diceRemaining = 1;\n                setNumberOfDice(diceRemaining);\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                const diceRemaining = 2;\n                setNumberOfDice(diceRemaining);\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n          if (sixDiceladder3) {\n            // 1, 2, 3, 4, 5, 6\n            newRollScore += 2000;\n            break;\n          } else if (sixDiceladder1 && count[0] === 2) {\n            // 1, 2, 3, 4, 5 y 1\n            newRollScore += 1600;\n            break;\n          } else if (sixDiceladder1 && count[4] === 2 || sixDiceladder2 && count[4] === 2) {\n            // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\n            newRollScore += 1550;\n            break;\n          } else if (sixDiceladder1 || sixDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          }\n\n          // Tres pares de dados\n          let countPairs = 0;\n          for (let i = 0; i < 6; i++) {\n            if (count[i] === 2) {\n              countPairs += 1;\n            }\n          }\n          if (countPairs === 3) {\n            newRollScore += 1500;\n            break;\n          }\n\n          // 3 dados iguales\n          let sixDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n            // Dados 1 y 5    \n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              sixDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              sixDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              sixDiceThreeEq = true;\n            }\n          }\n          if (sixDiceThreeEq) {\n            if (diceCount === 6) {\n              setNumberOfDice(6);\n            }\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          }\n        case 5:\n          // 5 dados iguales\n          if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            const diceRemaining = 1;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                const diceRemaining = 6;\n                setNumberOfDice(diceRemaining);\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                const diceRemaining = 6;\n                setNumberOfDice(diceRemaining);\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                const diceRemaining = 1;\n                setNumberOfDice(diceRemaining);\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          if (fiveDiceladder1 || fiveDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          }\n\n          // 3 dados iguales\n          let fiveDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fiveDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fiveDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fiveDiceThreeEq = true;\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fiveDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fiveDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fiveDiceThreeEq = true;\n            }\n          }\n          if (fiveDiceThreeEq) {\n            break;\n          }\n        case 4:\n          // 4 dados iguales\n          if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                break;\n              }\n            }\n            if (foundFourDice) {\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n              break;\n            }\n          }\n\n          // 3 dados iguales\n          let fourDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fourDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fourDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fourDiceThreeEq = true;\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fourDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fourDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fourDiceThreeEq = true;\n            }\n          }\n          if (fourDiceThreeEq) {\n            break;\n          }\n        case 3:\n          // 3 dados iguales\n          let threeDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              threeDiceThreeEq = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              threeDiceThreeEq = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              threeDiceThreeEq = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              threeDiceThreeEq = true;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              threeDiceThreeEq = true;\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              threeDiceThreeEq = true;\n            }\n          }\n          if (threeDiceThreeEq) {\n            break;\n          }\n        case 2:\n          // 2 dados iguales\n          let twoDiceTh = false;\n          for (let i = 0; i < 6; i++) {\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              twoDiceTh = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              twoDiceTh = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              twoDiceTh = true;\n              const diceRemaining = 6;\n              setNumberOfDice(diceRemaining);\n            }\n          }\n          if (twoDiceTh) {\n            break;\n          }\n        case 1:\n          // 1 dado\n          let oneDiceTh = false;\n          if (diceAmount.length === 1) {\n            if (count[0] === 1) {\n              // Un dado de 1\n              newRollScore += 100;\n              oneDiceTh = true;\n            } else if (count[4] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              oneDiceTh = true;\n            }\n          }\n          if (oneDiceTh) {\n            const diceRemaining = 6;\n            setNumberOfDice(diceRemaining);\n            break;\n          }\n        default:\n          newRollScore += 0;\n          const diceRemaining = 6;\n          setNumberOfDice(diceRemaining);\n          alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\n          break;\n      }\n\n      // Actualizar el puntaje total del turno y puntaje de la tirada\n      setRollScore(newRollScore);\n      setTurnScore(turnScore + newRollScore);\n\n      // Contador de tiradas\n      setRoll(roll + 1);\n    }\n  };\n  const endTurn = () => {\n    // Finalizar el turno del jugador\n\n    // Actualización de puntajes y cambio de turno\n    if (playerInGame[currentPlayerIndex]) {\n      if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed) {\n        // Actualiza los puntos si no sobrepasa el límite de puntuación\n        const newTotalScore = [...totalScore];\n        newTotalScore[currentScoreIndex] += turnScore;\n        setTotalScore(newTotalScore);\n      }\n    }\n    setCurrentPlayerIndex(prevIndex => (prevIndex + 1) % players.length);\n    setCurrentScoreIndex(prevIndex => (prevIndex + 1) % totalScore.length);\n    setTurnScore(0);\n    setRollScore(0);\n    setRoll(0);\n    setRollCondition(true);\n    setMaximumPointsSupperpassed(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this), !isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: diceValues.map((value, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          number: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"roll-button\",\n          onClick: rollDice,\n          disabled: !rollCondition || gameOver || maximumPointsSupperpassed,\n          children: \"Tirar los dados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"end-turn-button\",\n          onClick: endTurn,\n          disabled: gameOver,\n          children: \"Terminar turno\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rolls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentPlayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje de la tirada: \", rollScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje acumulado del turno: \", turnScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje total del jugador: \", totalScore[currentScoreIndex]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 587,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"NTBP9EtOcFoC6NSEgccDLQdfpPY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Dice","Modal","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","rollScore","setRollScore","rollCondition","setRollCondition","gameOver","setGameOver","maximumPointsSupperpassed","setMaximumPointsSupperpassed","turnScore","setTurnScore","diceValues","setDiceValues","numberOfDice","setNumberOfDice","diceCount","setDiceCount","isModalOpen","setIsModalOpen","players","setPlayers","totalScore","setTotalScore","playerInGame","setPlayerInGame","currentPlayerIndex","setCurrentPlayerIndex","currentScoreIndex","setCurrentScoreIndex","currentPlayer","handleCloseModal","handleConfirm","numPlayers","playerNames","playerScores","inGame","updatePlayerInGame","alert","updateRollCondition","updateGameState","rollDice","diceAmount","Array","map","Math","floor","random","count","forEach","value","newRollScore","length","foundSixDice","i","diceRemaining","foundFiveDice","foundFourDice","sixDiceladder1","sixDiceladder2","sixDiceladder3","countPairs","sixDiceThreeEq","updateDiceCount","prevCount","fiveDiceladder1","fiveDiceladder2","fiveDiceThreeEq","fourDiceThreeEq","threeDiceThreeEq","twoDiceTh","oneDiceTh","endTurn","newTotalScore","prevIndex","className","children","isOpen","onClose","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","index","number","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dice from './Dice';\r\nimport Modal from './Modal';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [rollCondition, setRollCondition] = useState(true);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n    const [numberOfDice, setNumberOfDice] = useState(6);\r\n    const [diceCount, setDiceCount] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(true);\r\n    const [players, setPlayers] = useState([]);\r\n    const [totalScore, setTotalScore] = useState([]);\r\n    const [playerInGame, setPlayerInGame] = useState([]);\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n    const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\r\n\r\n    const currentPlayer = players[currentPlayerIndex];\r\n    \r\n    const handleCloseModal = () => { // Maneja la ventana de ingreso de jugadores\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => { // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\r\n        setPlayers(playerNames);\r\n        setTotalScore(playerScores);\r\n        setPlayerInGame(inGame);\r\n    };\r\n\r\n    useEffect(() => { // Entrada al \"Juego\"\r\n        if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) { \r\n            // El jugador ingresa al juego\r\n            const updatePlayerInGame = [...playerInGame];\r\n            updatePlayerInGame[currentPlayerIndex] = true;\r\n            setPlayerInGame(updatePlayerInGame);\r\n            alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\r\n            \r\n            // Finaliza el turno para el jugador recién ingresado al juego\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n            alert(\"Tu turno ha finalizado!\");\r\n        }\r\n\r\n        // Ganar el juego\r\n        if ((totalScore[currentScoreIndex] + turnScore) === 10000) {\r\n            const updateGameState = true;\r\n            setGameOver(updateGameState);\r\n            alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\")\r\n        } else if ((totalScore[currentScoreIndex] + turnScore) > 10000) {\r\n            const updateGameState = true;\r\n            setMaximumPointsSupperpassed(updateGameState);\r\n            alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\r\n        }\r\n    }, [turnScore]);\r\n\r\n\r\n    const rollDice = () => { // Tirar los dados\r\n\r\n        // Verificar si el jugador está dentro del juego para permitir más tiradas\r\n        if (roll === 1 && turnScore < 700 &&!playerInGame[currentPlayerIndex]) {\r\n            alert(\"No puedes tirar más los dados, no estás dentro del juego\");\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n        } else {\r\n\r\n            // CREAR UN HAVEDICE CON USESTATE 6 Y PONER EN CADA SUMA DE PUNTAJES UN SETHAVEDICE QUE MODIFIQUE EL VALOR - \r\n            // MODIFICAR EL IF Y HACERLO UN FOR QUE RECORRA DEL 1 AL 6 Y SI SE CUMPLE LA CONDICION DE QUE i === HAVEDICE, SETEAR NUMBEROFDICE CON ESE VALOR, LUEGO BREAK - \r\n            // SI SUMA UN DADO SOLO, VOLVER A SETEAR A 6 - CUANDO TERMINA EL TURNO SETEAR HAVEDICE A 6 - CAMBIAR [...Array(6)] POR [...Array(numberOfDice)]\r\n\r\n            // Generar números aleatorios para cada dado\r\n            const diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1);\r\n\r\n            // Actualizar valores de los dados\r\n            setDiceValues(diceAmount);\r\n    \r\n            // Contador de cada número del 1 al 6\r\n            const count = [0, 0, 0, 0, 0, 0];\r\n            diceAmount.forEach(value => {\r\n                count[value - 1]++;\r\n            });\r\n    \r\n            // Calcular puntaje de la tirada\r\n            let newRollScore = 0;\r\n    \r\n            // Puntajes según las combinaciones de dados\r\n            switch (diceAmount.length) {\r\n                // Cada Case depende de la cantidad de dados tirados\r\n\r\n                case 6:\r\n                    // 6 dados iguales\r\n                    if (count[0] === 6) { // Seis dados de 1\r\n                        newRollScore += 6000;\r\n                        break;\r\n                    } else if (count[4] === 6) { // Seis dados de 5\r\n                        newRollScore += 3000;\r\n                        break;\r\n                    } else { // Seis dados de 2, 3, 4 o 6\r\n                        let foundSixDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 6) {\r\n                                newRollScore += (i + 1) * 600;\r\n                                foundSixDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundSixDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 5 dados iguales\r\n                    if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                        newRollScore += 4050;\r\n                        break;\r\n                    } else if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 400 + 100;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 400 + 50;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                const diceRemaining = 1;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        const diceRemaining = 2;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                        newRollScore += 1200;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        const diceRemaining = 2;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                                newRollScore += (i + 1) * 200 + 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 150;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 1;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 1;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 2;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                    const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n    \r\n                    if (sixDiceladder3) { // 1, 2, 3, 4, 5, 6\r\n                        newRollScore += 2000;\r\n                        break;    \r\n                    } else if (sixDiceladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                        newRollScore += 1600;\r\n                        break;\r\n                    } else if ((sixDiceladder1 && count[4] === 2) || (sixDiceladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                        newRollScore += 1550;\r\n                        break;\r\n                    } else if ((sixDiceladder1) || (sixDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    }\r\n    \r\n                    // Tres pares de dados\r\n                    let countPairs = 0;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (count[i] === 2) {\r\n                            countPairs += 1;\r\n                        }\r\n                    }\r\n                    if (countPairs === 3) {\r\n                        newRollScore += 1500;\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let sixDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    // Dados 1 y 5    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            sixDiceThreeEq = true;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            sixDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            sixDiceThreeEq = true;\r\n                        }\r\n                    }\r\n                    if (sixDiceThreeEq) {\r\n                        if (diceCount === 6) {\r\n                            setNumberOfDice(6);\r\n                        }\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    }\r\n                \r\n                case 5:\r\n                    // 5 dados iguales\r\n                    if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        const diceRemaining = 1;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 6;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 6;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                const diceRemaining = 1;\r\n                                setNumberOfDice(diceRemaining);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n    \r\n                    if ((fiveDiceladder1) || (fiveDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let fiveDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fiveDiceThreeEq = true;\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fiveDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fiveDiceThreeEq = true;\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fiveDiceThreeEq = true;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fiveDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fiveDiceThreeEq = true;\r\n                        }\r\n                    }\r\n                    if (fiveDiceThreeEq) {\r\n                        break;\r\n                    }\r\n    \r\n                case 4:\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    // 3 dados iguales\r\n                    let fourDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fourDiceThreeEq = true;\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fourDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fourDiceThreeEq = true;\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fourDiceThreeEq = true;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fourDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fourDiceThreeEq = true;\r\n                        }\r\n                    }\r\n                    if (fourDiceThreeEq) {\r\n                        break;\r\n                    }\r\n    \r\n                case 3:\r\n                    // 3 dados iguales\r\n                    let threeDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            threeDiceThreeEq = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            threeDiceThreeEq = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            threeDiceThreeEq = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            threeDiceThreeEq = true;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            threeDiceThreeEq = true;\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            threeDiceThreeEq = true;\r\n                        }\r\n                    }\r\n                    if (threeDiceThreeEq) {\r\n                        break;\r\n                    }\r\n    \r\n                case 2:\r\n                    // 2 dados iguales\r\n                    let twoDiceTh = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            twoDiceTh = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            twoDiceTh = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            twoDiceTh = true;\r\n                            const diceRemaining = 6;\r\n                            setNumberOfDice(diceRemaining);\r\n                        }\r\n                    }\r\n                    if (twoDiceTh) {\r\n                        break;\r\n                    }\r\n    \r\n                case 1:\r\n                    // 1 dado\r\n                    let oneDiceTh = false;\r\n                    if (diceAmount.length === 1) {\r\n                        if (count[0] === 1) { // Un dado de 1\r\n                            newRollScore += 100;\r\n                            oneDiceTh = true;\r\n                        } else if (count[4] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            oneDiceTh = true;\r\n                        }\r\n                    }\r\n                    if (oneDiceTh) {\r\n                        const diceRemaining = 6;\r\n                        setNumberOfDice(diceRemaining);\r\n                        break;\r\n                    }\r\n    \r\n                default: \r\n                    newRollScore += 0;\r\n                    const diceRemaining = 6;\r\n                    setNumberOfDice(diceRemaining);\r\n                    alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\")\r\n                    break;\r\n            }\r\n    \r\n            // Actualizar el puntaje total del turno y puntaje de la tirada\r\n            setRollScore(newRollScore);\r\n            setTurnScore(turnScore + newRollScore);\r\n            \r\n            // Contador de tiradas\r\n            setRoll(roll + 1); \r\n        }\r\n    };\r\n\r\n    const endTurn = () => { // Finalizar el turno del jugador\r\n\r\n        // Actualización de puntajes y cambio de turno\r\n        if (playerInGame[currentPlayerIndex]) {\r\n            if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed) { // Actualiza los puntos si no sobrepasa el límite de puntuación\r\n                const newTotalScore = [...totalScore];\r\n                newTotalScore[currentScoreIndex] += turnScore;\r\n                setTotalScore(newTotalScore);\r\n            }\r\n        }\r\n        setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % players.length);\r\n        setCurrentScoreIndex((prevIndex) => (prevIndex + 1) % totalScore.length);\r\n        setTurnScore(0);\r\n        setRollScore(0);\r\n        setRoll(0);\r\n        setRollCondition(true);\r\n        setMaximumPointsSupperpassed(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={handleCloseModal} \r\n                onConfirm={handleConfirm}\r\n            />\r\n            {!isModalOpen && (\r\n                <div>\r\n                    <div className=\"dice-container\">\r\n                        {diceValues.map((value, index) => (\r\n                            <Dice key={index} number={value} />\r\n                        ))}\r\n                    </div>\r\n                    <div className='buttons-container'>\r\n                        <button className=\"roll-button\" \r\n                            onClick={rollDice}\r\n                            disabled={!rollCondition || gameOver || maximumPointsSupperpassed}\r\n                        >\r\n                            Tirar los dados\r\n                        </button>\r\n                        <button className=\"end-turn-button\" \r\n                            onClick={endTurn}\r\n                            disabled={gameOver}\r\n                        >\r\n                            Terminar turno\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"rolls\">\r\n                        <p>{currentPlayer}</p>\r\n                        <p>Puntaje de la tirada: {rollScore}</p>\r\n                        <p>Puntaje acumulado del turno: {turnScore}</p>\r\n                        <p>Puntaje total del jugador: {totalScore[currentScoreIndex]}</p> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}