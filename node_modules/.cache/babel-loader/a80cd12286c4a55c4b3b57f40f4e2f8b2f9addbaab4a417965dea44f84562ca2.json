{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Dice from './Dice';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [score, setScore] = useState(0);\n  const calculateScore = diceValues => {\n    let diceCount = {};\n    let totalScore = 0;\n\n    // Contar la cantidad de cada valor de dado\n    diceValues.forEach(value => {\n      diceCount[value] = (diceCount[value] || 0) + 1;\n    });\n\n    // Calcular el puntaje según las reglas\n    Object.entries(diceCount).forEach(([value, count]) => {\n      value = parseInt(value);\n      if (count >= 3) {\n        if (value === 1) {\n          totalScore += 1000 * (count - 2); // Ejemplo: 1-1-1-1-1-1 = 1000 * 6 = 6000pts\n        } else {\n          totalScore += value * 100 * (count - 2); // Ejemplo: 2-2-2 = 200 * 2 = 400pts\n        }\n      }\n      if (count === 6) {\n        totalScore += value * 100 * 6; // Ejemplo: 2-2-2-2-2-2 = 200 * 6 = 1200pts\n      }\n    });\n\n    // Escalera (1-2-3-4-5 o 2-3-4-5-6) = 1500pts\n    const sortedValues = [...diceValues].sort((a, b) => a - b);\n    if (sortedValues.toString() === \"1,2,3,4,5\" || sortedValues.toString() === \"2,3,4,5,6\") {\n      totalScore += 1500;\n    }\n\n    // Tres pares = 1500pts (ejemplo: 2-2-4-4-6-6)\n    const uniqueValues = Object.keys(diceCount).length;\n    if (uniqueValues === 3 && Object.values(diceCount).every(count => count === 2)) {\n      totalScore += 1500;\n    }\n    return totalScore;\n  };\n  const rollDice = () => {\n    setRoll(roll + 1);\n\n    // Simular el lanzamiento de 6 dados\n    const diceValues = Array.from({\n      length: 6\n    }, () => Math.floor(Math.random() * 6) + 1);\n    console.log(\"Resultados de los dados:\", diceValues);\n\n    // Calcular el puntaje\n    const currentScore = calculateScore(diceValues);\n    setScore(score + currentScore);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: [...Array(6)].map((_, index) => /*#__PURE__*/_jsxDEV(Dice, {\n        roll: roll\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-button\",\n      onClick: rollDice,\n      children: \"Tirar los dados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: [\"Puntaje actual: \", score, \" puntos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"FiTRcsYTGMhs+RI5wI6BpA2bJ60=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Dice","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","score","setScore","calculateScore","diceValues","diceCount","totalScore","forEach","value","Object","entries","count","parseInt","sortedValues","sort","a","b","toString","uniqueValues","keys","length","values","every","rollDice","Array","from","Math","floor","random","console","log","currentScore","className","children","map","_","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Dice from './Dice';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const calculateScore = (diceValues) => {\r\n        let diceCount = {};\r\n        let totalScore = 0;\r\n\r\n        // Contar la cantidad de cada valor de dado\r\n        diceValues.forEach(value => {\r\n            diceCount[value] = (diceCount[value] || 0) + 1;\r\n        });\r\n\r\n        // Calcular el puntaje según las reglas\r\n        Object.entries(diceCount).forEach(([value, count]) => {\r\n            value = parseInt(value);\r\n\r\n            if (count >= 3) {\r\n                if (value === 1) {\r\n                    totalScore += 1000 * (count - 2); // Ejemplo: 1-1-1-1-1-1 = 1000 * 6 = 6000pts\r\n                } else {\r\n                    totalScore += value * 100 * (count - 2); // Ejemplo: 2-2-2 = 200 * 2 = 400pts\r\n                }\r\n            }\r\n\r\n            if (count === 6) {\r\n                totalScore += value * 100 * 6; // Ejemplo: 2-2-2-2-2-2 = 200 * 6 = 1200pts\r\n            }\r\n        });\r\n\r\n        // Escalera (1-2-3-4-5 o 2-3-4-5-6) = 1500pts\r\n        const sortedValues = [...diceValues].sort((a, b) => a - b);\r\n        if ((sortedValues.toString() === \"1,2,3,4,5\") || (sortedValues.toString() === \"2,3,4,5,6\")) {\r\n            totalScore += 1500;\r\n        }\r\n\r\n        // Tres pares = 1500pts (ejemplo: 2-2-4-4-6-6)\r\n        const uniqueValues = Object.keys(diceCount).length;\r\n        if (uniqueValues === 3 && Object.values(diceCount).every(count => count === 2)) {\r\n            totalScore += 1500;\r\n        }\r\n\r\n        return totalScore;\r\n    };\r\n\r\n    const rollDice = () => {\r\n        setRoll(roll + 1);\r\n\r\n        // Simular el lanzamiento de 6 dados\r\n        const diceValues = Array.from({ length: 6 }, () => Math.floor(Math.random() * 6) + 1);\r\n        console.log(\"Resultados de los dados:\", diceValues);\r\n\r\n        // Calcular el puntaje\r\n        const currentScore = calculateScore(diceValues);\r\n        setScore(score + currentScore);\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"dice-container\">\r\n                {[...Array(6)].map((_, index) => (\r\n                    <Dice key={index} roll={roll} />\r\n                ))}\r\n            </div>\r\n            <button className=\"roll-button\" onClick={rollDice}>Tirar los dados</button>\r\n            <div className=\"score\">\r\n                Puntaje actual: {score} puntos\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}