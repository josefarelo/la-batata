{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Dice from './Dice';\nimport Modal from './Modal';\nimport Player from './Player';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [turnScore, setTurnScore] = useState(0);\n  const [rollScore, setRollScore] = useState(0);\n  const [totalScore, setTotalScore] = useState(0);\n  const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\n  const [isModalOpen, setIsModalOpen] = useState(true);\n  const [numPlayers, setNumPlayers] = useState(0);\n  const [players, setPlayers] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const handleCloseModal = players => {\n    // Maneja la ventana de ingreso de jugadores\n    setNumPlayers(players);\n    setIsModalOpen(false);\n  };\n  const handleConfirm = (numPlayers, playerNames) => {\n    // Actualiza el estado con los nombres de los jugadores\n    setPlayers(playerNames);\n  };\n  function enteringTheGame(player, points) {\n    // Ingreso al \"Juego\"\n    player.score += points;\n    if (player.score >= 700) {\n      player.isInGame = true;\n    }\n  }\n  const rollDice = () => {\n    // Tirar los dados\n    setRoll(roll + 1);\n\n    // Generar números aleatorios para cada dado\n    const newDiceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\n\n    // Actualizar valores de los dados\n    setDiceValues(newDiceValues);\n\n    // Contador de cada número del 1 al 6\n    const count = [0, 0, 0, 0, 0, 0];\n    newDiceValues.forEach(value => {\n      count[value - 1]++;\n    });\n\n    // Calcular puntaje de la tirada\n    let newRollScore = 0;\n\n    // Verificar reglas de puntaje según las combinaciones de dados\n    switch (newDiceValues.length) {\n      // Cada Case depende de la cantidad de dados tirados\n      case 6:\n        // 6 dados iguales\n        if (count[0] === 6) {\n          // Seis dados de 1\n          newRollScore += 6000;\n          break;\n        } else if (count[4] === 6) {\n          // Seis dados de 5\n          newRollScore += 3000;\n          break;\n        } else {\n          // Seis dados de 2, 3, 4 o 6\n          let foundSixDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 6) {\n              newRollScore += (i + 1) * 600;\n              foundSixDice = true;\n              break;\n            }\n          }\n          if (foundSixDice) {\n            break;\n          }\n        }\n\n        // 5 dados iguales\n        if (count[0] === 5 && count[4] === 1) {\n          // Cinco dados de 1 y un dado de 5\n          newRollScore += 4050;\n          break;\n        } else if (count[0] === 5) {\n          // Cinco dados de 1\n          newRollScore += 4000;\n          break;\n        } else if (count[4] === 5 && count[0] === 1) {\n          // Cinco dados de 5 y un dado de 1\n          newRollScore += 2100;\n          break;\n        } else if (count[4] === 5) {\n          // Cinco dados de 5\n          newRollScore += 2000;\n          break;\n        } else {\n          let foundFiveDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 5 && count[0] === 1) {\n              // Cinco dados de 2, 3, 4 o 6 y un dado de 1\n              newRollScore += (i + 1) * 400 + 100;\n              foundFiveDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 5 && count[4] === 1) {\n              // Cinco dados de 2, 3, 4 o 6 y un dado de 5\n              newRollScore += (i + 1) * 400 + 50;\n              foundFiveDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 5) {\n              // Cinco dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 400;\n              foundFiveDice = true;\n              break;\n            }\n          }\n          if (foundFiveDice) {\n            break;\n          }\n        }\n\n        // 4 dados iguales\n        if (count[0] === 4 && count[4] === 2) {\n          // Cuatro dados de 1 y dos dados de 5\n          newRollScore += 2100;\n          break;\n        } else if (count[0] === 4 && count[4] === 1) {\n          // Cuatro dados de 1 y un dado de 5\n          newRollScore += 2050;\n          break;\n        } else if (count[0] === 4) {\n          // Cuatro dados de 1\n          newRollScore += 2000;\n          break;\n        } else if (count[4] === 4 && count[0] === 2) {\n          // Cuatro dados de 5 y dos dados de 1\n          newRollScore += 1200;\n          break;\n        } else if (count[4] === 4 && count[0] === 1) {\n          // Cuatro dados de 5 y un dado de 1\n          newRollScore += 1100;\n          break;\n        } else if (count[4] === 4) {\n          // Cuatro dados de 5\n          newRollScore += 1000;\n          break;\n        } else {\n          let foundFourDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 4 && count[0] === 2) {\n              // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\n              newRollScore += (i + 1) * 200 + 200;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[4] === 2) {\n              // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\n              newRollScore += (i + 1) * 200 + 100;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\n              newRollScore += (i + 1) * 200 + 150;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[0] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n              newRollScore += (i + 1) * 200 + 100;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n              newRollScore += (i + 1) * 200 + 50;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4) {\n              // Cuatro dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 200;\n              foundFourDice = true;\n              break;\n            }\n          }\n          if (foundFourDice) {\n            break;\n          }\n        }\n\n        // Escalera\n        const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n        const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n        const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n        if (sixDiceladder3) {\n          // 1, 2, 3, 4, 5, 6\n          newRollScore += 2000;\n          break;\n        } else if (sixDiceladder1 && count[0] === 2) {\n          // 1, 2, 3, 4, 5 y 1\n          newRollScore += 1600;\n          break;\n        } else if (sixDiceladder1 && count[4] === 2 || sixDiceladder2 && count[4] === 2) {\n          // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\n          newRollScore += 1550;\n          break;\n        } else if (sixDiceladder1 || sixDiceladder2) {\n          // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n          newRollScore += 1500;\n          break;\n        }\n\n        // Tres pares de dados\n        let countPairs = 0;\n        for (let i = 0; i < 6; i++) {\n          if (count[i] === 2) {\n            countPairs += 1;\n          }\n        }\n        if (countPairs === 3) {\n          newRollScore += 1500;\n          break;\n        }\n\n        // 3 dados iguales\n        let sixDiceThreeEq = false;\n        for (let i = 0; i < 6; i++) {\n          if (i !== 0 && i !== 4 && count[i] === 3) {\n            // Tres dados de 2, 3, 4 o 6\n            newRollScore += (i + 1) * 100;\n            sixDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 3) {\n            // Tres dados de 1\n            newRollScore += 1000;\n            sixDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 3) {\n            // Tres dados de 5\n            newRollScore += 500;\n            sixDiceThreeEq = true;\n          }\n          // Dados 1 y 5    \n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            sixDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            sixDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            sixDiceThreeEq = true;\n          }\n        }\n        if (sixDiceThreeEq) {\n          break;\n        }\n      case 5:\n        // 5 dados iguales\n        if (count[0] === 5) {\n          // Cinco dados de 1\n          newRollScore += 4000;\n          break;\n        } else if (count[4] === 5) {\n          // Cinco dados de 5\n          newRollScore += 2000;\n          break;\n        } else {\n          let foundFiveDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 5) {\n              // Cinco dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 400;\n              foundFiveDice = true;\n              break;\n            }\n          }\n          if (foundFiveDice) {\n            break;\n          }\n        }\n\n        // 4 dados iguales\n        if (count[0] === 4 && count[4] === 1) {\n          // Cuatro dados de 1 y un dado de 5\n          newRollScore += 2050;\n          break;\n        } else if (count[0] === 4) {\n          // Cuatro dados de 1\n          newRollScore += 2000;\n          break;\n        } else if (count[4] === 4 && count[0] === 1) {\n          // Cuatro dados de 5 y un dado de 1\n          newRollScore += 1100;\n          break;\n        } else if (count[4] === 4) {\n          // Cuatro dados de 5\n          newRollScore += 1000;\n          break;\n        } else {\n          let foundFourDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 4 && count[0] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n              newRollScore += (i + 1) * 200 + 100;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n              newRollScore += (i + 1) * 200 + 50;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4) {\n              // Cuatro dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 200;\n              foundFourDice = true;\n              break;\n            }\n          }\n          if (foundFourDice) {\n            break;\n          }\n        }\n\n        // Escalera\n        const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n        const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n        if (fiveDiceladder1 || fiveDiceladder2) {\n          // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n          newRollScore += 1500;\n          break;\n        }\n\n        // 3 dados iguales\n        let fiveDiceThreeEq = false;\n        for (let i = 0; i < 6; i++) {\n          if (i !== 0 && i !== 4 && count[i] === 3) {\n            // Tres dados de 2, 3, 4 o 6\n            newRollScore += (i + 1) * 100;\n            fiveDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 3) {\n            // Tres dados de 1\n            newRollScore += 1000;\n            fiveDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 3) {\n            // Tres dados de 5\n            newRollScore += 500;\n            fiveDiceThreeEq = true;\n          }\n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            fiveDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            fiveDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            fiveDiceThreeEq = true;\n          }\n        }\n        if (fiveDiceThreeEq) {\n          break;\n        }\n      case 4:\n        // 4 dados iguales\n        if (count[0] === 4) {\n          // Cuatro dados de 1\n          newRollScore += 2000;\n          break;\n        } else if (count[4] === 4) {\n          // Cuatro dados de 5\n          newRollScore += 1000;\n          break;\n        } else {\n          let foundFourDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 4) {\n              // Cuatro dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 200;\n              foundFourDice = true;\n              break;\n            }\n          }\n          if (foundFourDice) {\n            break;\n          }\n        }\n\n        // 3 dados iguales\n        let fourDiceThreeEq = false;\n        for (let i = 0; i < 6; i++) {\n          if (i !== 0 && i !== 4 && count[i] === 3) {\n            // Tres dados de 2, 3, 4 o 6\n            newRollScore += (i + 1) * 100;\n            fourDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 3) {\n            // Tres dados de 1\n            newRollScore += 1000;\n            fourDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 3) {\n            // Tres dados de 5\n            newRollScore += 500;\n            fourDiceThreeEq = true;\n          }\n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            fourDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            fourDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            fourDiceThreeEq = true;\n          }\n        }\n        if (fourDiceThreeEq) {\n          break;\n        }\n      case 3:\n        // 3 dados iguales\n        let threeDiceThreeEq = false;\n        for (let i = 0; i < 6; i++) {\n          if (i !== 0 && i !== 4 && count[i] === 3) {\n            // Tres dados de 2, 3, 4 o 6\n            newRollScore += (i + 1) * 100;\n            threeDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 3) {\n            // Tres dados de 1\n            newRollScore += 1000;\n            threeDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 3) {\n            // Tres dados de 5\n            newRollScore += 500;\n            threeDiceThreeEq = true;\n          }\n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            threeDiceThreeEq = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            threeDiceThreeEq = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            threeDiceThreeEq = true;\n          }\n        }\n        if (threeDiceThreeEq) {\n          break;\n        }\n      case 2:\n        // 2 dados iguales\n        let twoDiceTh = false;\n        for (let i = 0; i < 6; i++) {\n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            twoDiceTh = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            twoDiceTh = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            twoDiceTh = true;\n          }\n        }\n        if (twoDiceTh) {\n          break;\n        }\n      case 1:\n        // 1 dado\n        let oneDiceTh = false;\n        if (newDiceValues.length === 1) {\n          if (count[0] === 1) {\n            newRollScore += 100;\n            oneDiceTh = true;\n          } else if (count[4] === 1) {\n            newRollScore += 50;\n            oneDiceTh = true;\n          }\n        }\n        if (oneDiceTh) {\n          break;\n        }\n      default:\n        newRollScore += 0;\n        break;\n    }\n\n    // Actualizar el puntaje total del turno y puntaje de la tirada\n    setTurnScore(turnScore + newRollScore);\n    setRollScore(newRollScore);\n    setCurrentPlayerIndex(prevIndex => (prevIndex + 1) % players.length);\n  };\n  const currentPlayer = players[currentPlayerIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }, this), !isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: diceValues.map((value, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          number: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"roll-button\",\n        onClick: rollDice,\n        children: \"Tirar los dados\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rolls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: players\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje de la tirada: \", rollScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje acumulado del turno: \", turnScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje total del jugador: \", totalScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"Sgeplie+fQjG0naCGu+33jyMzkU=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Dice","Modal","Player","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","turnScore","setTurnScore","rollScore","setRollScore","totalScore","setTotalScore","diceValues","setDiceValues","isModalOpen","setIsModalOpen","numPlayers","setNumPlayers","players","setPlayers","currentPlayerIndex","setCurrentPlayerIndex","handleCloseModal","handleConfirm","playerNames","enteringTheGame","player","points","score","isInGame","rollDice","newDiceValues","Array","map","Math","floor","random","count","forEach","value","newRollScore","length","foundSixDice","i","foundFiveDice","foundFourDice","sixDiceladder1","sixDiceladder2","sixDiceladder3","countPairs","sixDiceThreeEq","fiveDiceladder1","fiveDiceladder2","fiveDiceThreeEq","fourDiceThreeEq","threeDiceThreeEq","twoDiceTh","oneDiceTh","prevIndex","currentPlayer","className","children","isOpen","onClose","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","index","number","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Dice from './Dice';\r\nimport Modal from './Modal';\r\nimport Player from './Player';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [totalScore, setTotalScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n    const [isModalOpen, setIsModalOpen] = useState(true);\r\n    const [numPlayers, setNumPlayers] = useState(0);\r\n    const [players, setPlayers] = useState([]);\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n\r\n    const handleCloseModal = (players) => { // Maneja la ventana de ingreso de jugadores\r\n        setNumPlayers(players);\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleConfirm = (numPlayers, playerNames) => {\r\n        // Actualiza el estado con los nombres de los jugadores\r\n        setPlayers(playerNames);\r\n    };\r\n\r\n    function enteringTheGame(player, points) { // Ingreso al \"Juego\"\r\n        player.score += points;\r\n        if (player.score >= 700) {\r\n            player.isInGame = true;\r\n        }\r\n    }\r\n\r\n    const rollDice = () => { // Tirar los dados\r\n        setRoll(roll + 1);\r\n\r\n        // Generar números aleatorios para cada dado\r\n        const newDiceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\r\n\r\n        // Actualizar valores de los dados\r\n        setDiceValues(newDiceValues);\r\n\r\n        // Contador de cada número del 1 al 6\r\n        const count = [0, 0, 0, 0, 0, 0];\r\n        newDiceValues.forEach(value => {\r\n            count[value - 1]++;\r\n        });\r\n\r\n        // Calcular puntaje de la tirada\r\n        let newRollScore = 0;\r\n\r\n        // Verificar reglas de puntaje según las combinaciones de dados\r\n        switch (newDiceValues.length) {\r\n            // Cada Case depende de la cantidad de dados tirados\r\n            case 6:\r\n                // 6 dados iguales\r\n                if (count[0] === 6) { // Seis dados de 1\r\n                    newRollScore += 6000;\r\n                    break;\r\n                } else if (count[4] === 6) { // Seis dados de 5\r\n                    newRollScore += 3000;\r\n                    break;\r\n                } else { // Seis dados de 2, 3, 4 o 6\r\n                    let foundSixDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 6) {\r\n                            newRollScore += (i + 1) * 600;\r\n                            foundSixDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundSixDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 5 dados iguales\r\n                if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                    newRollScore += 4050;\r\n                    break;\r\n                } else if (count[0] === 5) { // Cinco dados de 1\r\n                    newRollScore += 4000;\r\n                    break;\r\n                } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                    newRollScore += 2100;\r\n                    break;\r\n                } else if (count[4] === 5) { // Cinco dados de 5\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else {\r\n                    let foundFiveDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                            newRollScore += (i + 1) * 400 + 100;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                            newRollScore += (i + 1) * 400 + 50;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 400;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFiveDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 4 dados iguales\r\n                if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                    newRollScore += 2100;\r\n                    break;\r\n                } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                    newRollScore += 2050;\r\n                    break;\r\n                } else if (count[0] === 4) { // Cuatro dados de 1\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                    newRollScore += 1200;\r\n                    break;\r\n                } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                    newRollScore += 1100;\r\n                    break;\r\n                } else if (count[4] === 4) { // Cuatro dados de 5\r\n                    newRollScore += 1000;\r\n                    break;\r\n                } else {\r\n                    let foundFourDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                            newRollScore += (i + 1) * 200 + 200;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                            newRollScore += (i + 1) * 200 + 100;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                            newRollScore += (i + 1) * 200 + 150;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                            newRollScore += (i + 1) * 200 + 100;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                            newRollScore += (i + 1) * 200 + 50;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 200;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFourDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Escalera\r\n                const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n\r\n                if (sixDiceladder3) { // 1, 2, 3, 4, 5, 6\r\n                    newRollScore += 2000;\r\n                    break;    \r\n                } else if (sixDiceladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                    newRollScore += 1600;\r\n                    break;\r\n                } else if ((sixDiceladder1 && count[4] === 2) || (sixDiceladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                    newRollScore += 1550;\r\n                    break;\r\n                } else if ((sixDiceladder1) || (sixDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                    newRollScore += 1500;\r\n                    break;\r\n                }\r\n\r\n                // Tres pares de dados\r\n                let countPairs = 0;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (count[i] === 2) {\r\n                        countPairs += 1;\r\n                    }\r\n                }\r\n                if (countPairs === 3) {\r\n                    newRollScore += 1500;\r\n                    break;\r\n                }\r\n\r\n                // 3 dados iguales\r\n                let sixDiceThreeEq = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                        newRollScore += (i + 1) * 100;\r\n                        sixDiceThreeEq = true;\r\n                    } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                        newRollScore += 1000;\r\n                        sixDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                        newRollScore += 500;\r\n                        sixDiceThreeEq = true;\r\n                    }\r\n                // Dados 1 y 5    \r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        sixDiceThreeEq = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        sixDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        sixDiceThreeEq = true;\r\n                    }\r\n                }\r\n                if (sixDiceThreeEq) {\r\n                    break;\r\n                }\r\n            \r\n            case 5:\r\n                // 5 dados iguales\r\n                if (count[0] === 5) { // Cinco dados de 1\r\n                    newRollScore += 4000;\r\n                    break;\r\n                } else if (count[4] === 5) { // Cinco dados de 5\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else {\r\n                    let foundFiveDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 400;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFiveDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 4 dados iguales\r\n                if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                    newRollScore += 2050;\r\n                    break;\r\n                } else if (count[0] === 4) { // Cuatro dados de 1\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                    newRollScore += 1100;\r\n                    break;\r\n                } else if (count[4] === 4) { // Cuatro dados de 5\r\n                    newRollScore += 1000;\r\n                    break;\r\n                } else {\r\n                    let foundFourDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                            newRollScore += (i + 1) * 200 + 100;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                            newRollScore += (i + 1) * 200 + 50;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 200;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFourDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Escalera\r\n                const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n\r\n                if ((fiveDiceladder1) || (fiveDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                    newRollScore += 1500;\r\n                    break;\r\n                }\r\n\r\n                // 3 dados iguales\r\n                let fiveDiceThreeEq = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                        newRollScore += (i + 1) * 100;\r\n                        fiveDiceThreeEq = true;\r\n                    } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                        newRollScore += 1000;\r\n                        fiveDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                        newRollScore += 500;\r\n                        fiveDiceThreeEq = true;\r\n                    }\r\n\r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        fiveDiceThreeEq = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        fiveDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        fiveDiceThreeEq = true;\r\n                    }\r\n                }\r\n                if (fiveDiceThreeEq) {\r\n                    break;\r\n                }\r\n\r\n            case 4:\r\n                // 4 dados iguales\r\n                if (count[0] === 4) { // Cuatro dados de 1\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else if (count[4] === 4) { // Cuatro dados de 5\r\n                    newRollScore += 1000;\r\n                    break;\r\n                } else {\r\n                    let foundFourDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 200;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFourDice) {\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                // 3 dados iguales\r\n                let fourDiceThreeEq = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                        newRollScore += (i + 1) * 100;\r\n                        fourDiceThreeEq = true;\r\n                    } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                        newRollScore += 1000;\r\n                        fourDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                        newRollScore += 500;\r\n                        fourDiceThreeEq = true;\r\n                    }\r\n\r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        fourDiceThreeEq = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        fourDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        fourDiceThreeEq = true;\r\n                    }\r\n                }\r\n                if (fourDiceThreeEq) {\r\n                    break;\r\n                }\r\n\r\n            case 3:\r\n                // 3 dados iguales\r\n                let threeDiceThreeEq = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                        newRollScore += (i + 1) * 100;\r\n                        threeDiceThreeEq = true;\r\n                    } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                        newRollScore += 1000;\r\n                        threeDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                        newRollScore += 500;\r\n                        threeDiceThreeEq = true;\r\n                    }\r\n\r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        threeDiceThreeEq = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        threeDiceThreeEq = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        threeDiceThreeEq = true;\r\n                    }\r\n                }\r\n                if (threeDiceThreeEq) {\r\n                    break;\r\n                }\r\n\r\n            case 2:\r\n                // 2 dados iguales\r\n                let twoDiceTh = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        twoDiceTh = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        twoDiceTh = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        twoDiceTh = true;\r\n                    }\r\n                }\r\n                if (twoDiceTh) {\r\n                    break;\r\n                }\r\n\r\n            case 1:\r\n                // 1 dado\r\n                let oneDiceTh = false;\r\n                if (newDiceValues.length === 1) {\r\n                    if (count[0] === 1) {\r\n                        newRollScore += 100;\r\n                        oneDiceTh = true;\r\n                    } else if (count[4] === 1) {\r\n                        newRollScore += 50;\r\n                        oneDiceTh = true;\r\n                    }\r\n                }\r\n                if (oneDiceTh) {\r\n                    break;\r\n                }\r\n\r\n            default: \r\n                newRollScore += 0;\r\n                break;\r\n        }\r\n\r\n        // Actualizar el puntaje total del turno y puntaje de la tirada\r\n        setTurnScore(turnScore + newRollScore);\r\n        setRollScore(newRollScore);\r\n\r\n        setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % players.length);\r\n    };\r\n\r\n    const currentPlayer = players[currentPlayerIndex];\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={handleCloseModal} \r\n                onConfirm={handleConfirm}\r\n            />\r\n            {!isModalOpen && (\r\n                <div>\r\n                    <div className=\"dice-container\">\r\n                        {diceValues.map((value, index) => (\r\n                            <Dice key={index} number={value} />\r\n                        ))}\r\n                    </div>\r\n                    <button className=\"roll-button\" onClick={rollDice}>Tirar los dados</button>\r\n                    <div className=\"rolls\">\r\n                        <p>{players}</p>\r\n                        <p>Puntaje de la tirada: {rollScore}</p>\r\n                        <p>Puntaje acumulado del turno: {turnScore}</p>\r\n                        <p>Puntaje total del jugador: {totalScore}</p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}