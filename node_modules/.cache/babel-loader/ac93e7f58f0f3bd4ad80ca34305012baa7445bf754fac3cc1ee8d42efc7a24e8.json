{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dice from './Dice';\nimport Modal from './Modal';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [rollScore, setRollScore] = useState(0);\n  const [rollCondition, setRollCondition] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\n  const [turnScore, setTurnScore] = useState(0);\n  const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\n  const [updateNumberOfDice, setUpdateNumberOfDice] = useState(6);\n  const [isModalOpen, setIsModalOpen] = useState(true);\n  const [players, setPlayers] = useState([]);\n  const [totalScore, setTotalScore] = useState([]);\n  const [playerInGame, setPlayerInGame] = useState([]);\n  const [playerMidGame, setPlayerMidGame] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\n  const [pure, setPure] = useState(false);\n  const [forcedThrow, setForcedThrow] = useState(false);\n  const [turnCounter, setTurnCounter] = useState(0);\n  const [activateTurnCounter, setActivateTurnCounter] = useState(false);\n  const [roundCounter, setRoundCounter] = useState(-1);\n  const [batataCaliente, setBatataCaliente] = useState(false);\n  const [canBatatear, setCanBatatear] = useState(false);\n  const currentPlayer = players[currentPlayerIndex];\n  const isOdd = number => number % 2 !== 0;\n  const handleCloseModal = () => {\n    // Maneja la ventana de ingreso de jugadores\n    setIsModalOpen(false);\n  };\n  const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => {\n    // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\n    setPlayers(playerNames);\n    setTotalScore(playerScores);\n    setPlayerInGame(inGame);\n  };\n  useEffect(() => {\n    // Condiciones por puntaje del jugador (Ingreso al juego, Ganar, Límite para funciones especiales...)\n    // Entrada al \"Juego\"\n    if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) {\n      // El jugador ingresa al juego\n      const updatePlayerInGame = [...playerInGame];\n      updatePlayerInGame[currentPlayerIndex] = true;\n      setPlayerInGame(updatePlayerInGame);\n      alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\n\n      // Finaliza el turno para el jugador recién ingresado al juego\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n      alert(\"Tu turno ha finalizado!\");\n    }\n\n    // Ganar el juego\n    if (totalScore[currentScoreIndex] + turnScore === 10000) {\n      const updateGameState = true;\n      setGameOver(updateGameState);\n      alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\");\n    } else if (totalScore[currentScoreIndex] + turnScore > 10000) {\n      const updateGameState = true;\n      setMaximumPointsSupperpassed(updateGameState);\n      alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\n    }\n\n    // Límite para funciones especiales\n    if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] < 5000) {\n      const updatePlayerMidGame = [...playerMidGame];\n      updatePlayerMidGame[currentPlayerIndex] = true;\n      setPlayerMidGame(updatePlayerMidGame);\n    } else if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] > 5000) {\n      const updatePlayerMidGame = [...playerMidGame];\n      updatePlayerMidGame[currentPlayerIndex] = false;\n      setPlayerMidGame(updatePlayerMidGame);\n    }\n  }, [turnScore]); // !LUEGO AGREGAR LAS CONDICIONES DE FUNCIONES ESPECIALES DONDE ESTEN DENTRO O FUERA DEL MID GAME!\n\n  useEffect(() => {\n    // Actualizar cantidad de rondas y habilitar \"Batatear\"\n    // Activar contador de turnos\n    if (players.length > 2 && playerInGame.every(player => player) && currentPlayerIndex === 0 && !activateTurnCounter) {\n      setActivateTurnCounter(true);\n      setTurnCounter(0);\n    }\n\n    //Contador de rondas\n    if (turnCounter === players.length && turnCounter > 1) {\n      if (playerInGame.every(player => player) && currentPlayer[0]) {\n        setRoundCounter(prevRoundCounter => prevRoundCounter + 1);\n      }\n      setTurnCounter(0);\n    }\n\n    // Habilitar \"Batatear\"\n    if (playerInGame[currentPlayerIndex]) {\n      setCanBatatear(true);\n    }\n    if (batataCaliente) {\n      setCanBatatear(false);\n    }\n  }, [turnCounter]);\n  useEffect(() => {\n    // Batata Caliente ON/OFF\n    if (roundCounter === 5) {\n      setBatataCaliente(true);\n      setForcedThrow(true);\n      alert(\"¡¡¡Batata caliente!!!\");\n    } else if (roundCounter > 5) {\n      setBatataCaliente(false);\n      setRoundCounter(0);\n    }\n  }, [roundCounter]);\n  const rollDice = () => {\n    // Tirar los dados\n\n    let diceCount = 0;\n    let diceAmount = [...Array(6)];\n    if (roll === 0) {\n      setUpdateNumberOfDice(6);\n    }\n    let numberOfDice = updateNumberOfDice;\n    let mustRollAllTheDice = false;\n    if (forcedThrow) {\n      setForcedThrow(false);\n    }\n\n    // Verificar si el jugador está dentro del juego para permitir más tiradas\n    if (roll === 1 && turnScore < 700 && !playerInGame[currentPlayerIndex]) {\n      alert(\"No puedes tirar más los dados, no estás dentro del juego\");\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n    } else {\n      if (batataCaliente) {\n        // Cambia la cantidad de dados para la Batata Caliente\n        diceAmount = [1].map(() => Math.floor(Math.random() * 6) + 1);\n        if (roll === 0) {\n          setRollCondition(false);\n        }\n      } else {\n        diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1); // Generar números aleatorios para cada dado\n        if (canBatatear) {\n          const invertDice = {\n            1: 6,\n            6: 1,\n            2: 5,\n            5: 2,\n            3: 4,\n            4: 3\n          };\n          return arr.map(num => invertDice[num] !== undefined ? invertDice[num] : num);\n        }\n      }\n\n      // Actualizar valores de los dados\n      setDiceValues(diceAmount);\n\n      // Contador de cada número del 1 al 6\n      const count = [0, 0, 0, 0, 0, 0];\n      diceAmount.forEach(value => {\n        count[value - 1]++;\n      });\n\n      // Calcular puntaje de la tirada\n      let newRollScore = 0;\n\n      // Puntajes según las combinaciones de dados\n      switch (diceAmount.length) {\n        // Cada Case es la cantidad de dados tirados\n        case 6:\n          // 6 dados iguales\n          if (count[0] === 6) {\n            // Seis dados de 1\n            newRollScore += 6000;\n            break;\n          } else if (count[4] === 6) {\n            // Seis dados de 5\n            newRollScore += 3000;\n            break;\n          } else {\n            // Seis dados de 2, 3, 4 o 6\n            let foundSixDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 6) {\n                newRollScore += (i + 1) * 600;\n                foundSixDice = true;\n                break;\n              }\n            }\n            if (foundSixDice) {\n              break;\n            }\n          }\n\n          // 5 dados iguales\n          if (count[0] === 5 && count[4] === 1) {\n            // Cinco dados de 1 y un dado de 5\n            newRollScore += 4050;\n            break;\n          } else if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            numberOfDice = 1;\n            break;\n          } else if (count[4] === 5 && count[0] === 1) {\n            // Cinco dados de 5 y un dado de 1\n            newRollScore += 2100;\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            numberOfDice = 1;\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5 && count[0] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 400 + 100;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5 && count[4] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 400 + 50;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                numberOfDice = 1;\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 2) {\n            // Cuatro dados de 1 y dos dados de 5\n            newRollScore += 2100;\n            break;\n          } else if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            numberOfDice = 1;\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            numberOfDice = 2;\n            ;\n            break;\n          } else if (count[4] === 4 && count[0] === 2) {\n            // Cuatro dados de 5 y dos dados de 1\n            newRollScore += 1200;\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            numberOfDice = 1;\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            numberOfDice = 2;\n            ;\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\n                newRollScore += (i + 1) * 200 + 200;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\n                newRollScore += (i + 1) * 200 + 150;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                numberOfDice = 1;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                numberOfDice = 1;\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                numberOfDice = 2;\n                ;\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n          if (sixDiceladder3) {\n            // 1, 2, 3, 4, 5, 6\n            newRollScore += 2000;\n            break;\n          } else if (sixDiceladder1 && count[0] === 2) {\n            // 1, 2, 3, 4, 5 y 1\n            newRollScore += 1600;\n            break;\n          } else if (sixDiceladder1 && count[4] === 2 || sixDiceladder2 && count[4] === 2) {\n            // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\n            newRollScore += 1550;\n            break;\n          } else if (sixDiceladder1 || sixDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            numberOfDice = 1;\n            break;\n          }\n\n          // Tres pares de dados\n          let countPairs = 0;\n          for (let i = 0; i < 6; i++) {\n            if (count[i] === 2) {\n              countPairs += 1;\n            }\n          }\n          if (countPairs === 3) {\n            newRollScore += 1500;\n            break;\n          }\n\n          // 3 dados iguales\n          let sixDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            }\n            // Dados 1 y 5    \n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 2;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              sixDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                diceCount = diceCount + updateDiceCount;\n              } else {\n                const updateDiceCount = 1;\n                diceCount = diceCount + updateDiceCount;\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 1;\n              diceCount = diceCount + updateDiceCount;\n            }\n          }\n          if (sixDiceThreeEq) {\n            if (diceCount === 6) {\n              mustRollAllTheDice = true;\n              ;\n            } else {\n              numberOfDice = numberOfDice - diceCount;\n              if (numberOfDice === 0) {\n                mustRollAllTheDice = true;\n                ;\n              }\n            }\n            break;\n          }\n        case 5:\n          // 5 dados iguales\n          if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              mustRollAllTheDice = true;\n              ;\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            numberOfDice = 1;\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            numberOfDice = 1;\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                mustRollAllTheDice = true;\n                ;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                mustRollAllTheDice = true;\n                ;\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                numberOfDice = 1;\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          if (fiveDiceladder1 || fiveDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          }\n\n          // 3 dados iguales\n          let fiveDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 2;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fiveDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                diceCount = diceCount + updateDiceCount;\n              } else {\n                const updateDiceCount = 1;\n                diceCount = diceCount + updateDiceCount;\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 1;\n              diceCount = diceCount + updateDiceCount;\n            }\n          }\n          if (fiveDiceThreeEq) {\n            if (diceCount === 5) {\n              mustRollAllTheDice = true;\n              ;\n            } else {\n              numberOfDice = numberOfDice - diceCount;\n              if (numberOfDice === 0) {\n                mustRollAllTheDice = true;\n                ;\n              }\n            }\n            break;\n          }\n        case 4:\n          // 4 dados iguales\n          if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            mustRollAllTheDice = true;\n            ;\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                break;\n              }\n            }\n            if (foundFourDice) {\n              mustRollAllTheDice = true;\n              ;\n              break;\n            }\n          }\n\n          // 3 dados iguales\n          let fourDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              diceCount = diceCount + updateDiceCount;\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 2;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fourDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                diceCount = diceCount + updateDiceCount;\n              } else {\n                const updateDiceCount = 1;\n                diceCount = diceCount + updateDiceCount;\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 1;\n              diceCount = diceCount + updateDiceCount;\n            }\n          }\n          if (fourDiceThreeEq) {\n            if (diceCount === 4) {\n              mustRollAllTheDice = true;\n              ;\n            } else {\n              numberOfDice = numberOfDice - diceCount;\n            }\n            break;\n          }\n        case 3:\n          // 3 dados iguales\n          let threeDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              threeDiceThreeEq = true;\n              mustRollAllTheDice = true;\n              ;\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              threeDiceThreeEq = true;\n              mustRollAllTheDice = true;\n              ;\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              threeDiceThreeEq = true;\n              mustRollAllTheDice = true;\n              ;\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              threeDiceThreeEq = true;\n              const updateDiceCount = 2;\n              diceCount = diceCount + updateDiceCount;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              threeDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                diceCount = diceCount + updateDiceCount;\n              } else {\n                const updateDiceCount = 1;\n                diceCount = diceCount + updateDiceCount;\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              threeDiceThreeEq = true;\n              const updateDiceCount = 1;\n              diceCount = diceCount + updateDiceCount;\n            }\n          }\n          if (threeDiceThreeEq) {\n            if (diceCount === 3) {\n              mustRollAllTheDice = true;\n              ;\n            } else {\n              numberOfDice = numberOfDice - diceCount;\n            }\n            break;\n          }\n        case 2:\n          // 2 dados iguales\n          let twoDiceTh = false;\n          for (let i = 0; i < 6; i++) {\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              twoDiceTh = true;\n              mustRollAllTheDice = true;\n              ;\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              twoDiceTh = true;\n              if (i === 4 && count[i] === 2) {\n                mustRollAllTheDice = true;\n                ;\n              } else {\n                const updateDiceCount = 1;\n                diceCount = diceCount + updateDiceCount;\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              twoDiceTh = true;\n              const updateDiceCount = 1;\n              diceCount = diceCount + updateDiceCount;\n            }\n          }\n          if (twoDiceTh) {\n            if (diceCount === 2) {\n              mustRollAllTheDice = true;\n              ;\n            } else {\n              numberOfDice = numberOfDice - diceCount;\n            }\n            break;\n          }\n        case 1:\n          // 1 dado\n          let oneDiceTh = false;\n          if (diceAmount.length === 1) {\n            if (count[0] === 1) {\n              // Un dado de 1\n              newRollScore += 100;\n              oneDiceTh = true;\n            } else if (count[4] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              oneDiceTh = true;\n            }\n          }\n          if (oneDiceTh) {\n            mustRollAllTheDice = true;\n            ;\n            break;\n          }\n        default:\n          numberOfDice = 6;\n          setPure(true);\n          if (batataCaliente || !playerInGame[currentPlayerIndex]) {\n            setPure(false);\n          }\n          if (pure) {\n            alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\n          }\n          break;\n      }\n\n      // Tirada forzosa\n      if (playerInGame[currentPlayerIndex] && mustRollAllTheDice && !batataCaliente) {\n        alert(\"No hay más dados por tirar, debes lanzar todos nuevamente!\");\n        setForcedThrow(true);\n        numberOfDice = 6;\n        mustRollAllTheDice = false;\n      }\n\n      // Actualizar el puntaje del turno y puntaje de la tirada\n      if (batataCaliente && isOdd(diceAmount)) {\n        // Actualizacion de puntos por Batata Caliente\n        if (totalScore[currentPlayerIndex] - 1000 < 700) {\n          const newTotalScore = [...totalScore];\n          newTotalScore[currentPlayerIndex] = 700;\n          setTotalScore(newTotalScore);\n        } else {\n          const newTotalScore = [...totalScore];\n          newTotalScore[currentPlayerIndex] -= 1000;\n          setTotalScore(newTotalScore);\n        }\n      } else {\n        setRollScore(newRollScore);\n        setTurnScore(turnScore + newRollScore);\n        setUpdateNumberOfDice(numberOfDice);\n      }\n      setRoll(roll + 1); // Contador de tiradas\n    }\n  };\n  const endTurn = () => {\n    // Finalizar el turno del jugador\n\n    // Actualización de puntajes y cambio de turno\n    if (playerInGame[currentPlayerIndex]) {\n      if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed && !pure) {\n        // Actualiza los puntos si no sobrepasa el límite de puntuación\n        const newTotalScore = [...totalScore];\n        newTotalScore[currentScoreIndex] += turnScore;\n        setTotalScore(newTotalScore);\n      }\n    }\n    if (batataCaliente && !forcedThrow) {\n      setForcedThrow(true);\n      if (currentPlayerIndex === players.length - 1) {\n        setForcedThrow(false);\n      }\n    }\n    setTurnCounter(prevTurnCounter => prevTurnCounter + 1);\n    setCurrentPlayerIndex(prevIndex => (prevIndex + 1) % players.length);\n    setCurrentScoreIndex(prevIndex => (prevIndex + 1) % totalScore.length);\n    setTurnScore(0);\n    setRollScore(0);\n    setRoll(0);\n    setRollCondition(true);\n    setMaximumPointsSupperpassed(false);\n    setUpdateNumberOfDice(6);\n    setPure(false);\n  };\n  const batatear = () => {\n    // Activa la función especial \"Batatear\"\n    setCanBatatear(true);\n  };\n  const batataDeLaFortuna = () => {// Función especial batata de la fortuna\n    //codigo\n  };\n  const batatazo = () => {// Función especial batatazo\n    //codigo\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 13\n    }, this), !isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: diceValues.map((value, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          number: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"turn-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"roll-button\",\n            onClick: rollDice,\n            disabled: !rollCondition || gameOver || maximumPointsSupperpassed || pure,\n            children: \"Tirar los dados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"end-turn-button\",\n            onClick: endTurn,\n            disabled: gameOver || forcedThrow,\n            children: \"Finalizar turno\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"special-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"batatear\",\n            onClick: batatear,\n            disabled: !rollCondition || gameOver || maximumPointsSupperpassed || pure || !canBatatear,\n            children: \"Batatear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"batata-de-la-fortuna\",\n            onClick: batataDeLaFortuna\n            //disabled={gameOver || forcedThrow}\n            ,\n            children: \"Batata de la fortuna\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"batatazo\",\n            onClick: batatazo\n            //disabled={gameOver || forcedThrow}\n            ,\n            children: \"Batatazo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-points\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentPlayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje de la tirada: \", rollScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje acumulado del turno: \", turnScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje total del jugador: \", totalScore[currentScoreIndex]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 770,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"s6n1a6OwnK5QefhOnTkhvmcVTFM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Dice","Modal","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","rollScore","setRollScore","rollCondition","setRollCondition","gameOver","setGameOver","maximumPointsSupperpassed","setMaximumPointsSupperpassed","turnScore","setTurnScore","diceValues","setDiceValues","updateNumberOfDice","setUpdateNumberOfDice","isModalOpen","setIsModalOpen","players","setPlayers","totalScore","setTotalScore","playerInGame","setPlayerInGame","playerMidGame","setPlayerMidGame","currentPlayerIndex","setCurrentPlayerIndex","currentScoreIndex","setCurrentScoreIndex","pure","setPure","forcedThrow","setForcedThrow","turnCounter","setTurnCounter","activateTurnCounter","setActivateTurnCounter","roundCounter","setRoundCounter","batataCaliente","setBatataCaliente","canBatatear","setCanBatatear","currentPlayer","isOdd","number","handleCloseModal","handleConfirm","numPlayers","playerNames","playerScores","inGame","updatePlayerInGame","alert","updateRollCondition","updateGameState","updatePlayerMidGame","length","every","player","prevRoundCounter","rollDice","diceCount","diceAmount","Array","numberOfDice","mustRollAllTheDice","map","Math","floor","random","invertDice","arr","num","undefined","count","forEach","value","newRollScore","foundSixDice","i","foundFiveDice","foundFourDice","sixDiceladder1","sixDiceladder2","sixDiceladder3","countPairs","sixDiceThreeEq","updateDiceCount","fiveDiceladder1","fiveDiceladder2","fiveDiceThreeEq","fourDiceThreeEq","threeDiceThreeEq","twoDiceTh","oneDiceTh","newTotalScore","endTurn","prevTurnCounter","prevIndex","batatear","batataDeLaFortuna","batatazo","className","children","isOpen","onClose","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dice from './Dice';\r\nimport Modal from './Modal';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [rollCondition, setRollCondition] = useState(true);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n    const [updateNumberOfDice, setUpdateNumberOfDice] = useState(6);\r\n    const [isModalOpen, setIsModalOpen] = useState(true);\r\n    const [players, setPlayers] = useState([]);\r\n    const [totalScore, setTotalScore] = useState([]);\r\n    const [playerInGame, setPlayerInGame] = useState([]);\r\n    const [playerMidGame, setPlayerMidGame] = useState([]);\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n    const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\r\n    const [pure, setPure] = useState(false);\r\n    const [forcedThrow, setForcedThrow] = useState(false);\r\n    const [turnCounter, setTurnCounter] = useState(0);\r\n    const [activateTurnCounter, setActivateTurnCounter] = useState(false);\r\n    const [roundCounter, setRoundCounter] = useState(-1);\r\n    const [batataCaliente, setBatataCaliente] = useState(false);\r\n    const [canBatatear, setCanBatatear] = useState(false);\r\n\r\n    const currentPlayer = players[currentPlayerIndex];\r\n\r\n    const isOdd = number => number % 2 !== 0;\r\n    \r\n    const handleCloseModal = () => { // Maneja la ventana de ingreso de jugadores\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => { // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\r\n        setPlayers(playerNames);\r\n        setTotalScore(playerScores);\r\n        setPlayerInGame(inGame);\r\n    };\r\n\r\n    useEffect(() => { // Condiciones por puntaje del jugador (Ingreso al juego, Ganar, Límite para funciones especiales...)\r\n        // Entrada al \"Juego\"\r\n        if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) { \r\n            // El jugador ingresa al juego\r\n            const updatePlayerInGame = [...playerInGame];\r\n            updatePlayerInGame[currentPlayerIndex] = true;\r\n            setPlayerInGame(updatePlayerInGame);\r\n            alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\r\n            \r\n            // Finaliza el turno para el jugador recién ingresado al juego\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n            alert(\"Tu turno ha finalizado!\");\r\n        }\r\n\r\n        // Ganar el juego\r\n        if ((totalScore[currentScoreIndex] + turnScore) === 10000) {\r\n            const updateGameState = true;\r\n            setGameOver(updateGameState);\r\n            alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\")\r\n        } else if ((totalScore[currentScoreIndex] + turnScore) > 10000) {\r\n            const updateGameState = true;\r\n            setMaximumPointsSupperpassed(updateGameState);\r\n            alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\r\n        }\r\n\r\n        // Límite para funciones especiales\r\n        if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] < 5000) {\r\n            const updatePlayerMidGame = [...playerMidGame];\r\n            updatePlayerMidGame[currentPlayerIndex] = true;\r\n            setPlayerMidGame(updatePlayerMidGame);\r\n        } else if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] > 5000) {\r\n            const updatePlayerMidGame = [...playerMidGame]; \r\n            updatePlayerMidGame[currentPlayerIndex] = false;\r\n            setPlayerMidGame(updatePlayerMidGame);\r\n        }\r\n    }, [turnScore]); // !LUEGO AGREGAR LAS CONDICIONES DE FUNCIONES ESPECIALES DONDE ESTEN DENTRO O FUERA DEL MID GAME!\r\n\r\n    useEffect(() => { // Actualizar cantidad de rondas y habilitar \"Batatear\"\r\n        // Activar contador de turnos\r\n        if(players.length > 2 && playerInGame.every(player => player) && currentPlayerIndex === 0 && !activateTurnCounter) {\r\n            setActivateTurnCounter(true);\r\n            setTurnCounter(0);\r\n        }\r\n\r\n        //Contador de rondas\r\n        if (turnCounter === players.length && turnCounter > 1) {\r\n            if (playerInGame.every(player => player) && currentPlayer[0]){\r\n                setRoundCounter(prevRoundCounter => prevRoundCounter + 1);\r\n            }\r\n            setTurnCounter(0);\r\n        }\r\n\r\n        // Habilitar \"Batatear\"\r\n        if (playerInGame[currentPlayerIndex]) { \r\n            setCanBatatear(true);\r\n        }\r\n        if (batataCaliente) {\r\n            setCanBatatear(false);\r\n        }\r\n    }, [turnCounter]);\r\n\r\n    useEffect(() => { // Batata Caliente ON/OFF\r\n        if (roundCounter === 5) {\r\n            setBatataCaliente(true);\r\n            setForcedThrow(true);\r\n            alert(\"¡¡¡Batata caliente!!!\");\r\n        } else if (roundCounter > 5) {\r\n            setBatataCaliente(false);\r\n            setRoundCounter(0);\r\n        }\r\n    }, [roundCounter]);\r\n\r\n    const rollDice = () => { // Tirar los dados\r\n\r\n        let diceCount = 0;\r\n        let diceAmount = [...Array(6)];\r\n\r\n        if (roll === 0) {\r\n            setUpdateNumberOfDice(6);\r\n        }\r\n        let numberOfDice = updateNumberOfDice;\r\n        let mustRollAllTheDice = false;\r\n\r\n        if (forcedThrow) {\r\n            setForcedThrow(false);\r\n        }\r\n\r\n        // Verificar si el jugador está dentro del juego para permitir más tiradas\r\n        if (roll === 1 && turnScore < 700 &&!playerInGame[currentPlayerIndex]) {\r\n            alert(\"No puedes tirar más los dados, no estás dentro del juego\");\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n        } else {\r\n            if (batataCaliente) { // Cambia la cantidad de dados para la Batata Caliente\r\n                diceAmount = [1].map(() => Math.floor(Math.random() * 6) + 1);\r\n                if (roll === 0) {\r\n                    setRollCondition(false);\r\n                }\r\n            } else {\r\n                diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1); // Generar números aleatorios para cada dado\r\n                if (canBatatear) {\r\n                    const invertDice = {\r\n                        1: 6,\r\n                        6: 1,\r\n                        2: 5,\r\n                        5: 2,\r\n                        3: 4,\r\n                        4: 3\r\n                    };\r\n                    return arr.map(num => invertDice[num] !== undefined ? invertDice[num] : num);\r\n                }\r\n            }\r\n\r\n            // Actualizar valores de los dados\r\n            setDiceValues(diceAmount);\r\n    \r\n            // Contador de cada número del 1 al 6\r\n            const count = [0, 0, 0, 0, 0, 0];\r\n            diceAmount.forEach(value => {\r\n                count[value - 1]++;\r\n            });\r\n\r\n            // Calcular puntaje de la tirada\r\n            let newRollScore = 0;\r\n    \r\n            // Puntajes según las combinaciones de dados\r\n            switch (diceAmount.length) {\r\n                \r\n                // Cada Case es la cantidad de dados tirados\r\n                case 6:\r\n                    // 6 dados iguales\r\n                    if (count[0] === 6) { // Seis dados de 1\r\n                        newRollScore += 6000;\r\n                        break;\r\n                    } else if (count[4] === 6) { // Seis dados de 5\r\n                        newRollScore += 3000;\r\n                        break;\r\n                    } else { // Seis dados de 2, 3, 4 o 6\r\n                        let foundSixDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 6) {\r\n                                newRollScore += (i + 1) * 600;\r\n                                foundSixDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundSixDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 5 dados iguales\r\n                    if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                        newRollScore += 4050;\r\n                        break;\r\n                    } else if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 400 + 100;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 400 + 50;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 2;;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                        newRollScore += 1200;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        numberOfDice = 2;;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                                newRollScore += (i + 1) * 200 + 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 150;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 2;;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                    const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n    \r\n                    if (sixDiceladder3) { // 1, 2, 3, 4, 5, 6\r\n                        newRollScore += 2000;\r\n                        break;    \r\n                    } else if (sixDiceladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                        newRollScore += 1600;\r\n                        break;\r\n                    } else if ((sixDiceladder1 && count[4] === 2) || (sixDiceladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                        newRollScore += 1550;\r\n                        break;\r\n                    } else if ((sixDiceladder1) || (sixDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    }\r\n    \r\n                    // Tres pares de dados\r\n                    let countPairs = 0;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (count[i] === 2) {\r\n                            countPairs += 1;\r\n                        }\r\n                    }\r\n                    if (countPairs === 3) {\r\n                        newRollScore += 1500;\r\n                        break;\r\n                    }\r\n\r\n                    // 3 dados iguales\r\n                    let sixDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    // Dados 1 y 5    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            sixDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (sixDiceThreeEq) {\r\n                        if (diceCount === 6) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                            if (numberOfDice === 0) {\r\n                                mustRollAllTheDice = true;;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                \r\n                case 5:\r\n                    // 5 dados iguales\r\n                    if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            mustRollAllTheDice = true;;\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                mustRollAllTheDice = true;;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                mustRollAllTheDice = true;;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n    \r\n                    if ((fiveDiceladder1) || (fiveDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let fiveDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fiveDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fiveDiceThreeEq) {\r\n                        if (diceCount === 5) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                            if (numberOfDice === 0) {\r\n                                mustRollAllTheDice = true;;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 4:\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            mustRollAllTheDice = true;;\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    // 3 dados iguales\r\n                    let fourDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fourDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fourDiceThreeEq) {\r\n                        if (diceCount === 4) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 3:\r\n                    // 3 dados iguales\r\n                    let threeDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            threeDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (threeDiceThreeEq) {\r\n                        if (diceCount === 3) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 2:\r\n                    // 2 dados iguales\r\n                    let twoDiceTh = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            twoDiceTh = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            twoDiceTh = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                mustRollAllTheDice = true;;\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            twoDiceTh = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (twoDiceTh) {\r\n                        if (diceCount === 2) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 1:\r\n                    // 1 dado\r\n                    let oneDiceTh = false;\r\n                    if (diceAmount.length === 1) {\r\n                        if (count[0] === 1) { // Un dado de 1\r\n                            newRollScore += 100;\r\n                            oneDiceTh = true;\r\n                        } else if (count[4] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            oneDiceTh = true;\r\n                        }\r\n                    }\r\n                    if (oneDiceTh) {\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    }\r\n    \r\n                default: \r\n                    numberOfDice = 6;\r\n                    setPure(true);\r\n                    if (batataCaliente || !playerInGame[currentPlayerIndex]) {\r\n                        setPure(false);\r\n                    }\r\n                    if (pure) {\r\n                        alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // Tirada forzosa\r\n            if (playerInGame[currentPlayerIndex] && mustRollAllTheDice && !batataCaliente) {\r\n                alert(\"No hay más dados por tirar, debes lanzar todos nuevamente!\");\r\n                setForcedThrow(true);\r\n                numberOfDice = 6\r\n                mustRollAllTheDice = false;\r\n            }\r\n\r\n            // Actualizar el puntaje del turno y puntaje de la tirada\r\n            if (batataCaliente && isOdd(diceAmount)) { // Actualizacion de puntos por Batata Caliente\r\n                if ((totalScore[currentPlayerIndex] - 1000) < 700 ) {\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentPlayerIndex] = 700;\r\n                    setTotalScore(newTotalScore); \r\n                } else {\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentPlayerIndex] -= 1000;\r\n                    setTotalScore(newTotalScore); \r\n                }\r\n            } else {\r\n                setRollScore(newRollScore);\r\n                setTurnScore(turnScore + newRollScore);\r\n                setUpdateNumberOfDice(numberOfDice);\r\n            }\r\n\r\n            setRoll(roll + 1); // Contador de tiradas\r\n        }\r\n    };\r\n\r\n    const endTurn = () => { // Finalizar el turno del jugador\r\n\r\n        // Actualización de puntajes y cambio de turno\r\n        if (playerInGame[currentPlayerIndex]) {\r\n            if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed && !pure) { // Actualiza los puntos si no sobrepasa el límite de puntuación\r\n                const newTotalScore = [...totalScore];\r\n                newTotalScore[currentScoreIndex] += turnScore;\r\n                setTotalScore(newTotalScore);\r\n            }\r\n        }\r\n        if(batataCaliente && !forcedThrow) {\r\n            setForcedThrow(true);\r\n            if (currentPlayerIndex === players.length - 1) {\r\n                setForcedThrow(false);\r\n            }\r\n        }\r\n\r\n        setTurnCounter(prevTurnCounter => prevTurnCounter + 1);\r\n        setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % players.length);\r\n        setCurrentScoreIndex((prevIndex) => (prevIndex + 1) % totalScore.length);\r\n        setTurnScore(0);\r\n        setRollScore(0);\r\n        setRoll(0);\r\n        setRollCondition(true);\r\n        setMaximumPointsSupperpassed(false);\r\n        setUpdateNumberOfDice(6);\r\n        setPure(false);\r\n    }\r\n\r\n    const batatear = () => { // Activa la función especial \"Batatear\"\r\n        setCanBatatear(true);\r\n    };\r\n\r\n    const batataDeLaFortuna = () => { // Función especial batata de la fortuna\r\n        //codigo\r\n    };\r\n    \r\n\r\n    const batatazo = () => { // Función especial batatazo\r\n        //codigo\r\n    };\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={handleCloseModal} \r\n                onConfirm={handleConfirm}\r\n            />\r\n            {!isModalOpen && (\r\n                <div className='game-container'>\r\n                    <div className=\"dice-container\">\r\n                        {diceValues.map((value, index) => (\r\n                            <Dice key={index} number={value} />\r\n                        ))}\r\n                    </div>\r\n                    <div className='buttons-container'>\r\n                        <div className='turn-buttons'>\r\n                            <button className=\"roll-button\" \r\n                                onClick={rollDice}\r\n                                disabled={!rollCondition || gameOver || maximumPointsSupperpassed || pure}\r\n                            >\r\n                                Tirar los dados\r\n                            </button>\r\n                            <button className=\"end-turn-button\" \r\n                                onClick={endTurn}\r\n                                disabled={gameOver || forcedThrow}\r\n                            >\r\n                                Finalizar turno\r\n                            </button>\r\n                        </div>\r\n                        <div className='special-buttons'>\r\n                            <button className=\"batatear\" \r\n                                onClick={batatear}\r\n                                disabled={!rollCondition || gameOver || maximumPointsSupperpassed || pure || !canBatatear}\r\n                            >\r\n                                Batatear\r\n                            </button>\r\n                            <button className=\"batata-de-la-fortuna\" \r\n                                onClick={batataDeLaFortuna}\r\n                                //disabled={gameOver || forcedThrow}\r\n                            >\r\n                                Batata de la fortuna\r\n                            </button>\r\n                            <button className=\"batatazo\" \r\n                                onClick={batatazo}\r\n                                //disabled={gameOver || forcedThrow}\r\n                            >\r\n                                Batatazo\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"player-points\">\r\n                        <p>{currentPlayer}</p>\r\n                        <p>Puntaje de la tirada: {rollScore}</p>\r\n                        <p>Puntaje acumulado del turno: {turnScore}</p>\r\n                        <p>Puntaje total del jugador: {totalScore[currentScoreIndex]}</p> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}