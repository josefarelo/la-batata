{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Dice from './Dice';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [turnScore, setTurnScore] = useState(0);\n  const [rollScore, setRollScore] = useState(0);\n  const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\n  const rollDice = () => {\n    setRoll(roll + 1);\n\n    // Generar números aleatorios para cada dado\n    //const newDiceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\n    const newDiceValues = [1, 5, 5, 5, 5, 5]; // Valores de prueba\n\n    // Mostrar los valores de los dados en la consola\n    console.log('Dados de este turno:', newDiceValues);\n\n    // Actualizar valores de los dados\n    setDiceValues(newDiceValues);\n\n    // Contador de cada número del 1 al 6\n    const count = [0, 0, 0, 0, 0, 0];\n    newDiceValues.forEach(value => {\n      count[value - 1]++;\n    });\n\n    // Calcular puntaje de la tirada\n    let newRollScore = 0;\n\n    // Verificar reglas de puntaje según las combinaciones de dados\n    switch (newDiceValues.length) {\n      case 6:\n        // 6 dados iguales\n        if (count[0] === 6) {\n          // Seis dados de 1\n          newRollScore += 6000;\n          break;\n        } else if (count[4] === 6) {\n          // Seis dados de 5\n          newRollScore += 3000;\n          break;\n        } else {\n          // Seis dados de 2, 3, 4 o 6\n          let foundSixDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 6) {\n              newRollScore += (i + 1) * 600;\n              foundSixDice = true;\n              break;\n            }\n          }\n          if (foundSixDice) {\n            break;\n          }\n        }\n\n        // 5 dados iguales\n        if (count[0] === 5 && count[4] === 1) {\n          // Cinco dados de 1 y un dado de 5\n          newRollScore += 5050;\n          break;\n        } else if (count[0] === 5) {\n          // Cinco dados de 1\n          newRollScore += 5000;\n          break;\n        } else if (count[4] === 5 && count[0] === 1) {\n          // Cinco dados de 5 y un dado de 1\n          newRollScore += 2600;\n          break;\n        } else if (count[4] === 5) {\n          // Cinco dados de 5\n          newRollScore += 2500;\n          break;\n        } else {\n          let foundFiveDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 5 && count[0] === 1) {\n              // Cinco dados de 2, 3, 4 o 6 y un dado de 1\n              newRollScore += (i + 1) * 500 + 100;\n              foundFiveDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 5 && count[4] === 1) {\n              // Cinco dados de 2, 3, 4 o 6 y un dado de 5\n              newRollScore += (i + 1) * 500 + 50;\n              foundFiveDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 5) {\n              // Cinco dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 500;\n              foundFiveDice = true;\n              break;\n            }\n          }\n          if (foundFiveDice) {\n            break;\n          }\n        }\n\n        // 4 dados iguales\n        if (count[0] === 4 && count[4] === 2) {\n          // Cuatro dados de 1 y dos dados de 5\n          newRollScore += 4100;\n          break;\n        } else if (count[0] === 4 && count[4] === 1) {\n          // Cuatro dados de 1 y un dado de 5\n          newRollScore += 4050;\n          break;\n        } else if (count[0] === 4) {\n          // Cuatro dados de 1\n          newRollScore += 4000;\n          break;\n        } else if (count[4] === 4 && count[0] === 2) {\n          // Cuatro dados de 5 y dos dados de 1\n          newRollScore += 2200;\n          break;\n        } else if (count[4] === 4 && count[0] === 1) {\n          // Cuatro dados de 5 y un dado de 1\n          newRollScore += 2100;\n          break;\n        } else if (count[4] === 4) {\n          // Cuatro dados de 5\n          newRollScore += 2000;\n          break;\n        } else {\n          let foundFourDice = false;\n          for (let i = 1; i < 6; i++) {\n            if (i !== 4 && count[i] === 4 && count[0] === 2) {\n              // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\n              newRollScore += (i + 1) * 400 + 200;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[4] === 2) {\n              // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\n              newRollScore += (i + 1) * 400 + 100;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\n              newRollScore += (i + 1) * 400 + 150;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[0] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n              newRollScore += (i + 1) * 400 + 100;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n              // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n              newRollScore += (i + 1) * 400 + 50;\n              foundFourDice = true;\n              break;\n            } else if (i !== 4 && count[i] === 4) {\n              // Cuatro dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 400;\n              foundFourDice = true;\n              break;\n            }\n          }\n          if (foundFourDice) {\n            break;\n          }\n        }\n\n        // Escalera\n        const ladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n        const ladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n        const ladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n        if (ladder3) {\n          // 1, 2, 3, 4, 5, 6\n          newRollScore += 2000;\n          break;\n        } else if (ladder1 && count[0] === 2) {\n          // 1, 2, 3, 4, 5 y 1\n          newRollScore += 1600;\n          break;\n        } else if (ladder1 && count[4] === 2 || ladder2 && count[4] === 2) {\n          // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\n          newRollScore += 1550;\n          break;\n        } else if (ladder1 || ladder2) {\n          // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n          newRollScore += 1500;\n          break;\n        }\n\n        // Tres pares de dados\n        let countPairs = 0;\n        for (let i = 0; i < 6; i++) {\n          if (count[i] === 2) {\n            countPairs += 1;\n          }\n        }\n        if (countPairs === 3) {\n          newRollScore += 1500;\n          break;\n        }\n\n        // 3 dados iguales\n        let someDice = false;\n        for (let i = 0; i < 6; i++) {\n          if (i !== 0 && i !== 4 && count[i] === 3) {\n            // Tres dados de 2, 3, 4 o 6\n            newRollScore += (i + 1) * 100;\n            someDice = true;\n          } else if (i === 0 && count[i] === 3) {\n            // Tres dados de 1\n            newRollScore += 1000;\n            someDice = true;\n          } else if (i === 4 && count[i] === 3) {\n            // Tres dados de 5\n            newRollScore += 500;\n            someDice = true;\n          }\n          if (i === 0 && count[i] === 2) {\n            // Dos dados de 1\n            newRollScore += 200;\n            someDice = true;\n          } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n            // Dos dados de 5 o Un dado de 1\n            newRollScore += 100;\n            someDice = true;\n          } else if (i === 4 && count[i] === 1) {\n            // Un dado de 5\n            newRollScore += 50;\n            someDice = true;\n          }\n        }\n        if (someDice) {\n          break;\n        }\n      default:\n        newRollScore += 0;\n        console.log(\"default\");\n        break;\n    }\n\n    // Actualizar el puntaje total del turno y puntaje de la tirada\n    setTurnScore(turnScore + newRollScore);\n    setRollScore(newRollScore);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceValues.map((value, index) => /*#__PURE__*/_jsxDEV(Dice, {\n        number: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-button\",\n      onClick: rollDice,\n      children: \"Tirar los dados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rolls\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Puntaje de la tirada: \", rollScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Puntaje acumulado del turno: \", turnScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"FOFSA8jrykhNhdKvPQv8WtBI8uo=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Dice","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","turnScore","setTurnScore","rollScore","setRollScore","diceValues","setDiceValues","rollDice","newDiceValues","console","log","count","forEach","value","newRollScore","length","foundSixDice","i","foundFiveDice","foundFourDice","ladder1","ladder2","ladder3","countPairs","someDice","className","children","map","index","number","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Dice from './Dice';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n\r\n    const rollDice = () => {\r\n        setRoll(roll + 1);\r\n\r\n        // Generar números aleatorios para cada dado\r\n        //const newDiceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\r\n        const newDiceValues = [1, 5, 5, 5, 5, 5]; // Valores de prueba\r\n\r\n        // Mostrar los valores de los dados en la consola\r\n        console.log('Dados de este turno:', newDiceValues);\r\n\r\n        // Actualizar valores de los dados\r\n        setDiceValues(newDiceValues);\r\n\r\n        // Contador de cada número del 1 al 6\r\n        const count = [0, 0, 0, 0, 0, 0];\r\n        newDiceValues.forEach(value => {\r\n            count[value - 1]++;\r\n        });\r\n\r\n        // Calcular puntaje de la tirada\r\n        let newRollScore = 0;\r\n\r\n        // Verificar reglas de puntaje según las combinaciones de dados\r\n        switch (newDiceValues.length) {\r\n\r\n            case 6:\r\n                // 6 dados iguales\r\n                if (count[0] === 6) { // Seis dados de 1\r\n                    newRollScore += 6000;\r\n                    break;\r\n                } else if (count[4] === 6) { // Seis dados de 5\r\n                    newRollScore += 3000;\r\n                    break;\r\n                } else { // Seis dados de 2, 3, 4 o 6\r\n                    let foundSixDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 6) {\r\n                            newRollScore += (i + 1) * 600;\r\n                            foundSixDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundSixDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 5 dados iguales\r\n                if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                    newRollScore += 5050;\r\n                    break;\r\n                } else if (count[0] === 5) { // Cinco dados de 1\r\n                    newRollScore += 5000;\r\n                    break;\r\n                } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                    newRollScore += 2600;\r\n                    break;\r\n                } else if (count[4] === 5) { // Cinco dados de 5\r\n                    newRollScore += 2500;\r\n                    break;\r\n                } else {\r\n                    let foundFiveDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                            newRollScore += (i + 1) * 500 + 100;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                            newRollScore += (i + 1) * 500 + 50;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 500;\r\n                            foundFiveDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFiveDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 4 dados iguales\r\n                if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                    newRollScore += 4100;\r\n                    break;\r\n                } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                    newRollScore += 4050;\r\n                    break;\r\n                } else if (count[0] === 4) { // Cuatro dados de 1\r\n                    newRollScore += 4000;\r\n                    break;\r\n                } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                    newRollScore += 2200;\r\n                    break;\r\n                } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                    newRollScore += 2100;\r\n                    break;\r\n                } else if (count[4] === 4) { // Cuatro dados de 5\r\n                    newRollScore += 2000;\r\n                    break;\r\n                } else {\r\n                    let foundFourDice = false;\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                            newRollScore += (i + 1) * 400 + 200;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                            newRollScore += (i + 1) * 400 + 100;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                            newRollScore += (i + 1) * 400 + 150;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                            newRollScore += (i + 1) * 400 + 100;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                            newRollScore += (i + 1) * 400 + 50;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 400;\r\n                            foundFourDice = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (foundFourDice) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Escalera\r\n                const ladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                const ladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                const ladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n\r\n                if (ladder3) { // 1, 2, 3, 4, 5, 6\r\n                    newRollScore += 2000;\r\n                    break;    \r\n                } else if (ladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                    newRollScore += 1600;\r\n                    break;\r\n                } else if ((ladder1 && count[4] === 2) || (ladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                    newRollScore += 1550;\r\n                    break;\r\n                } else if ((ladder1) || (ladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                    newRollScore += 1500;\r\n                    break;\r\n                }\r\n\r\n                // Tres pares de dados\r\n                let countPairs = 0;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (count[i] === 2) {\r\n                        countPairs += 1;\r\n                    }\r\n                }\r\n                if (countPairs === 3) {\r\n                    newRollScore += 1500;\r\n                    break;\r\n                }\r\n\r\n                // 3 dados iguales\r\n                let someDice = false;\r\n                for (let i = 0; i < 6; i++) {\r\n                    if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                        newRollScore += (i + 1) * 100;\r\n                        someDice = true;\r\n                    } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                        newRollScore += 1000;\r\n                        someDice = true;\r\n                    } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                        newRollScore += 500;\r\n                        someDice = true;\r\n                    }\r\n\r\n                    if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                        newRollScore += 200;\r\n                        someDice = true;\r\n                    } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                        newRollScore += 100;\r\n                        someDice = true;\r\n                    } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                        newRollScore += 50;\r\n                        someDice = true;\r\n                    }\r\n                }\r\n                if (someDice) {\r\n                    break;\r\n                }\r\n\r\n            default: \r\n                newRollScore += 0;\r\n                console.log(\"default\");\r\n                break;\r\n        }\r\n\r\n        // Actualizar el puntaje total del turno y puntaje de la tirada\r\n        setTurnScore(turnScore + newRollScore);\r\n        setRollScore(newRollScore);\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"dice-container\">\r\n                {diceValues.map((value, index) => (\r\n                    <Dice key={index} number={value} />\r\n                ))}\r\n            </div>\r\n            <button className=\"roll-button\" onClick={rollDice}>Tirar los dados</button>\r\n            <div className=\"rolls\">\r\n                <p>Puntaje de la tirada: {rollScore}</p>\r\n                <p>Puntaje acumulado del turno: {turnScore}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}