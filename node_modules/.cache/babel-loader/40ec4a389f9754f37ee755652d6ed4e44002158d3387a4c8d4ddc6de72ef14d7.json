{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\n// src/components/Game.js\nimport React, { useState } from 'react';\nimport Dice from './Dice';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [score, setScore] = useState(0);\n  const rollDice = () => {\n    setRoll(roll + 1);\n\n    // Generar números aleatorios para cada dado\n    const diceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\n\n    // Contador de cada número del 1 al 6\n    const count = [0, 0, 0, 0, 0, 0];\n    diceValues.forEach(value => {\n      count[value - 1]++;\n    });\n\n    // Calcular puntaje de la tirada\n    let turnScore = 0;\n\n    // Verificar reglas de puntaje según las combinaciones de dados\n    switch (diceValues.length) {\n      case 6:\n        // 6 dados\n        if (count[0] === 6) {\n          // Seis dados de 1\n          turnScore += 6000;\n        } else if (count[4] === 6) {\n          // Seis dados de 5\n          turnScore += 3000;\n        } else {\n          for (let i = 1; i < 6; i++) {\n            if (count[i] === 6) {\n              turnScore += (i + 1) * 600;\n              break;\n            }\n          }\n        }\n        break;\n      case 5:\n        // 5 dados\n        if (count[0] === 5) {\n          // Cinco dados de 1\n          turnScore += 5000;\n        } else if (count[4] === 5) {\n          // Cinco dados de 5\n          turnScore += 2500;\n        } else {\n          for (let i = 1; i < 6; i++) {\n            if (count[i] === 5) {\n              turnScore += (i + 1) * 500;\n              break;\n            }\n          }\n        }\n        break;\n      case 4:\n        // 4 dados\n        if (count[0] === 4) {\n          // Cuatro dados de 1\n          turnScore += 4000;\n        } else if (count[4] === 4) {\n          // Cuatro dados de 5\n          turnScore += 2000;\n        } else {\n          for (let i = 1; i < 6; i++) {\n            if (count[i] === 4) {\n              turnScore += (i + 1) * 400;\n              break;\n            }\n          }\n        }\n        break;\n      case 3:\n        // 3 dados\n        if (count[0] === 3) {\n          // Tres dados de 1\n          turnScore += 1000;\n        } else if (count[4] === 3) {\n          // Tres dados de 5\n          turnScore += 500;\n        } else {\n          for (let i = 1; i < 6; i++) {\n            if (count[i] === 3) {\n              turnScore += (i + 1) * 100;\n              break;\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n\n    // Verificar otras combinaciones especiales\n    // Tres pares de dados\n    const pairs = count.filter(num => num === 2).length;\n    if (pairs === 3) {\n      turnScore += 1500;\n    }\n\n    // Escalera\n    const isStraight1 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1;\n    const isStraight2 = count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n    if (isStraight1 || isStraight2) {\n      turnScore += 1500;\n    }\n\n    // Dado 1\n    if (count[0] === 2 && pairs !== 3) {\n      turnScore += 200;\n    } else if (count[0] === 1 && !isStraight1 && !isStraight2) {\n      turnScore += 100;\n    }\n\n    // Dado 5\n    if (count[4] === 2 && pairs !== 3) {\n      turnScore += 100;\n    } else if (count[4] === 1 && !isStraight1 && !isStraight2) {\n      turnScore += 50;\n    }\n\n    // Actualizar el puntaje total del turno\n    setScore(score + turnScore);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: [...Array(6)].map((_, index) => /*#__PURE__*/_jsxDEV(Dice, {\n        roll: roll\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"roll-button\",\n      onClick: rollDice,\n      children: \"Tirar los dados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rolls\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Tiradas realizadas: \", roll]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Puntaje acumulado: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"FiTRcsYTGMhs+RI5wI6BpA2bJ60=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Dice","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","score","setScore","rollDice","diceValues","Array","map","Math","floor","random","count","forEach","value","turnScore","length","i","pairs","filter","num","isStraight1","isStraight2","className","children","_","index","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["// src/components/Game.js\r\nimport React, { useState } from 'react';\r\nimport Dice from './Dice';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const rollDice = () => {\r\n        setRoll(roll + 1);\r\n\r\n        // Generar números aleatorios para cada dado\r\n        const diceValues = [...Array(6)].map(() => Math.floor(Math.random() * 6) + 1);\r\n\r\n        // Contador de cada número del 1 al 6\r\n        const count = [0, 0, 0, 0, 0, 0];\r\n        diceValues.forEach(value => {\r\n            count[value - 1]++;\r\n        });\r\n\r\n        // Calcular puntaje de la tirada\r\n        let turnScore = 0;\r\n\r\n        // Verificar reglas de puntaje según las combinaciones de dados\r\n        switch (diceValues.length) {\r\n            case 6:\r\n                // 6 dados\r\n                if (count[0] === 6) { // Seis dados de 1\r\n                    turnScore += 6000;\r\n                } else if (count[4] === 6) { // Seis dados de 5\r\n                    turnScore += 3000;\r\n                } else {\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (count[i] === 6) {\r\n                            turnScore += (i + 1) * 600;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 5:\r\n                // 5 dados\r\n                if (count[0] === 5) { // Cinco dados de 1\r\n                    turnScore += 5000;\r\n                } else if (count[4] === 5) { // Cinco dados de 5\r\n                    turnScore += 2500;\r\n                } else {\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (count[i] === 5) {\r\n                            turnScore += (i + 1) * 500;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 4:\r\n                // 4 dados\r\n                if (count[0] === 4) { // Cuatro dados de 1\r\n                    turnScore += 4000;\r\n                } else if (count[4] === 4) { // Cuatro dados de 5\r\n                    turnScore += 2000;\r\n                } else {\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (count[i] === 4) {\r\n                            turnScore += (i + 1) * 400;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 3:\r\n                // 3 dados\r\n                if (count[0] === 3) { // Tres dados de 1\r\n                    turnScore += 1000;\r\n                } else if (count[4] === 3) { // Tres dados de 5\r\n                    turnScore += 500;\r\n                } else {\r\n                    for (let i = 1; i < 6; i++) {\r\n                        if (count[i] === 3) {\r\n                            turnScore += (i + 1) * 100;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // Verificar otras combinaciones especiales\r\n        // Tres pares de dados\r\n        const pairs = count.filter(num => num === 2).length;\r\n        if (pairs === 3) {\r\n            turnScore += 1500;\r\n        }\r\n\r\n        // Escalera\r\n        const isStraight1 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1;\r\n        const isStraight2 = count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n        if (isStraight1 || isStraight2) {\r\n            turnScore += 1500;\r\n        }\r\n\r\n        // Dado 1\r\n        if (count[0] === 2 && pairs !== 3) {\r\n            turnScore += 200;\r\n        } else if (count[0] === 1 && !isStraight1 && !isStraight2) {\r\n            turnScore += 100;\r\n        }\r\n\r\n        // Dado 5\r\n        if (count[4] === 2 && pairs !== 3) {\r\n            turnScore += 100;\r\n        } else if (count[4] === 1 && !isStraight1 && !isStraight2) {\r\n            turnScore += 50;\r\n        }\r\n\r\n        // Actualizar el puntaje total del turno\r\n        setScore(score + turnScore);\r\n    };\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"dice-container\">\r\n                {[...Array(6)].map((_, index) => (\r\n                    <Dice key={index} roll={roll} />\r\n                ))}\r\n            </div>\r\n            <button className=\"roll-button\" onClick={rollDice}>Tirar los dados</button>\r\n            <div className=\"rolls\">\r\n                <p>Tiradas realizadas: {roll}</p>\r\n                <p>Puntaje acumulado: {score}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}