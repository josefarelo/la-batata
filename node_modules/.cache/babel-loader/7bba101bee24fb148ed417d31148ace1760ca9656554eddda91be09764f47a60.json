{"ast":null,"code":"import React,{useState,useEffect}from'react';import Dice from'./Dice';import Modal from'./Modal';import Menu from'./Menu';import'../styles/Game.scss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Game=()=>{const[roll,setRoll]=useState(0);const[rollScore,setRollScore]=useState(0);const[rollCondition,setRollCondition]=useState(true);const[gameOver,setGameOver]=useState(false);const[maximumPointsSupperpassed,setMaximumPointsSupperpassed]=useState(false);const[turnScore,setTurnScore]=useState(0);const[diceValues,setDiceValues]=useState([1,1,1,1,1,1]);const[updateNumberOfDice,setUpdateNumberOfDice]=useState(6);const[isModalOpen,setIsModalOpen]=useState(true);const[players,setPlayers]=useState([]);const[totalScore,setTotalScore]=useState([]);const[playerInGame,setPlayerInGame]=useState([]);const[playerMidGame,setPlayerMidGame]=useState([]);const[currentPlayerIndex,setCurrentPlayerIndex]=useState(0);const[currentScoreIndex,setCurrentScoreIndex]=useState(0);const[pure,setPure]=useState(false);const[forcedThrow,setForcedThrow]=useState(false);const[turnCounter,setTurnCounter]=useState(0);const[activateTurnCounter,setActivateTurnCounter]=useState(false);const[roundCounter,setRoundCounter]=useState(-1);const[batataCaliente,setBatataCaliente]=useState(false);const[batatearOn,setBatatearON]=useState(false);const[canBatatear,setCanBatatear]=useState(false);const[fortuneBatataOn,setFortuneBatataOn]=useState([]);const[fortuneBatataCounter,setFortuneBatataCounter]=useState([]);const currentPlayer=players[currentPlayerIndex];const isOdd=number=>number%2!==0;const handleCloseModal=()=>{// Maneja la ventana de ingreso de jugadores\nsetIsModalOpen(false);};const handleConfirm=(numPlayers,playerNames,playerScores,inGame)=>{// Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\nsetPlayers(playerNames);setTotalScore(playerScores);setPlayerInGame(inGame);};useEffect(()=>{// Condiciones por puntaje del jugador (Ingreso al juego, Ganar, Límite para funciones especiales...)\n// Crear \"Batata de la fortuna\"\nif(fortuneBatataOn.length===0){const updateFortuneBatata=[...playerInGame];setFortuneBatataOn(updateFortuneBatata);setFortuneBatataCounter(Array.from({length:updateFortuneBatata.length},()=>0));}// Entrada al \"Juego\"\nif(turnScore>=700&&!playerInGame[currentPlayerIndex]){// El jugador ingresa al juego\nconst updatePlayerInGame=[...playerInGame];updatePlayerInGame[currentPlayerIndex]=true;setPlayerInGame(updatePlayerInGame);alert(\"El \"+currentPlayer+\" ha entrado al juego!\");// Finaliza el turno para el jugador recién ingresado al juego\nconst updateRollCondition=false;setRollCondition(updateRollCondition);alert(\"Tu turno ha finalizado!\");}// Ganar el juego\nif(totalScore[currentScoreIndex]+turnScore===10000){const updateGameState=true;setGameOver(updateGameState);alert(\"Felicitaciones \"+currentPlayer+\", has ganado el juego!!!\");}else if(totalScore[currentScoreIndex]+turnScore>10000){const updateGameState=true;setMaximumPointsSupperpassed(updateGameState);alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");}// Límite para funciones especiales\nif(playerInGame[currentPlayerIndex]&&totalScore[currentPlayerIndex]<5000){const updatePlayerMidGame=[...playerMidGame];updatePlayerMidGame[currentPlayerIndex]=true;setPlayerMidGame(updatePlayerMidGame);}else if(playerInGame[currentPlayerIndex]&&totalScore[currentPlayerIndex]>5000){const updatePlayerMidGame=[...playerMidGame];updatePlayerMidGame[currentPlayerIndex]=false;setPlayerMidGame(updatePlayerMidGame);}// Finalizar el turno para el jugador que haya usado la Batata de la fortuna\nif(fortuneBatataOn[currentPlayerIndex]&&(fortuneBatataCounter[currentPlayerIndex]===1||fortuneBatataCounter[currentPlayerIndex]===2)){const updateRollCondition=false;setRollCondition(updateRollCondition);alert(players[currentPlayerIndex]+\" debes esperar \"+(3-fortuneBatataCounter[currentPlayerIndex])+\" turno/s para poder lanzar los dados!\");}},[turnScore,totalScore[currentPlayerIndex]]);useEffect(()=>{// Actualizar cantidad de rondas y habilitar \"Batatear\"\n// Activar contador de turnos\nif(players.length>2&&playerInGame.every(player=>player)&&currentPlayerIndex===0&&!activateTurnCounter){setActivateTurnCounter(true);setTurnCounter(0);}// Contador de rondas\nif(turnCounter===players.length&&turnCounter>1){if(playerInGame.every(player=>player)&&currentPlayer[0]){setRoundCounter(prevRoundCounter=>prevRoundCounter+1);}console.log(\"Ronda = \"+roundCounter);setTurnCounter(0);}// Habilitar botón de Batatear\nif(playerInGame[currentPlayerIndex]){setCanBatatear(true);}if(batataCaliente){setCanBatatear(false);}},[turnCounter]);useEffect(()=>{// Batata Caliente ON/OFF\nif(roundCounter===5){setBatataCaliente(true);setForcedThrow(true);alert(\"¡¡¡Batata caliente!!!\");}else if(roundCounter>5){setBatataCaliente(false);setRoundCounter(0);}},[roundCounter]);const rollDice=()=>{// Tirar los dados\nlet diceCount=0;let diceAmount=[...Array(6)];if(roll===0){setUpdateNumberOfDice(6);}let numberOfDice=updateNumberOfDice;let mustRollAllTheDice=false;if(forcedThrow){setForcedThrow(false);}// Verificar si el jugador está dentro del juego para permitir más tiradas\nif(roll===1&&turnScore<700&&!playerInGame[currentPlayerIndex]){alert(\"No puedes tirar más los dados, no estás dentro del juego\");const updateRollCondition=false;setRollCondition(updateRollCondition);}else{if(batataCaliente){// Cambia la cantidad de dados para la Batata Caliente\ndiceAmount=[1].map(()=>Math.floor(Math.random()*6)+1);if(roll===0){setRollCondition(false);}}else{diceAmount=[...Array(numberOfDice)].map(()=>Math.floor(Math.random()*6)+1);// Generar números aleatorios para cada dado\nif(batatearOn){// Batatear los dados\nconst invertDice={1:6,6:1,2:5,5:2,3:4,4:3};diceAmount=diceAmount.map(num=>invertDice[num]!==undefined?invertDice[num]:num);};}// Actualizar valores de los dados\nsetDiceValues(diceAmount);// Contador de cada número del 1 al 6\nconst count=[0,0,0,0,0,0];diceAmount.forEach(value=>{count[value-1]++;});// Calcular puntaje de la tirada\nlet newRollScore=0;// Puntajes según las combinaciones de dados\nswitch(diceAmount.length){// Cada Case es la cantidad de dados tirados\ncase 6:// 6 dados iguales\nif(count[0]===6){// Seis dados de 1\nnewRollScore+=6000;break;}else if(count[4]===6){// Seis dados de 5\nnewRollScore+=3000;break;}else{// Seis dados de 2, 3, 4 o 6\nlet foundSixDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===6){newRollScore+=(i+1)*600;foundSixDice=true;break;}}if(foundSixDice){break;}}// 5 dados iguales\nif(count[0]===5&&count[4]===1){// Cinco dados de 1 y un dado de 5\nnewRollScore+=4050;break;}else if(count[0]===5){// Cinco dados de 1\nnewRollScore+=4000;numberOfDice=1;break;}else if(count[4]===5&&count[0]===1){// Cinco dados de 5 y un dado de 1\nnewRollScore+=2100;break;}else if(count[4]===5){// Cinco dados de 5\nnewRollScore+=2000;numberOfDice=1;break;}else{let foundFiveDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===5&&count[0]===1){// Cinco dados de 2, 3, 4 o 6 y un dado de 1\nnewRollScore+=(i+1)*400+100;foundFiveDice=true;break;}else if(i!==4&&count[i]===5&&count[4]===1){// Cinco dados de 2, 3, 4 o 6 y un dado de 5\nnewRollScore+=(i+1)*400+50;foundFiveDice=true;break;}else if(i!==4&&count[i]===5){// Cinco dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*400;foundFiveDice=true;numberOfDice=1;break;}}if(foundFiveDice){break;}}// 4 dados iguales\nif(count[0]===4&&count[4]===2){// Cuatro dados de 1 y dos dados de 5\nnewRollScore+=2100;break;}else if(count[0]===4&&count[4]===1){// Cuatro dados de 1 y un dado de 5\nnewRollScore+=2050;numberOfDice=1;break;}else if(count[0]===4){// Cuatro dados de 1\nnewRollScore+=2000;numberOfDice=2;;break;}else if(count[4]===4&&count[0]===2){// Cuatro dados de 5 y dos dados de 1\nnewRollScore+=1200;break;}else if(count[4]===4&&count[0]===1){// Cuatro dados de 5 y un dado de 1\nnewRollScore+=1100;numberOfDice=1;break;}else if(count[4]===4){// Cuatro dados de 5\nnewRollScore+=1000;numberOfDice=2;;break;}else{let foundFourDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===4&&count[0]===2){// Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\nnewRollScore+=(i+1)*200+200;foundFourDice=true;break;}else if(i!==4&&count[i]===4&&count[4]===2){// Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\nnewRollScore+=(i+1)*200+100;foundFourDice=true;break;}else if(i!==4&&count[i]===4&&count[0]===1&&count[4]===1){// Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\nnewRollScore+=(i+1)*200+150;foundFourDice=true;break;}else if(i!==4&&count[i]===4&&count[0]===1){// Cuatro dados de 2, 3, 4 o 6 y un dado de 1\nnewRollScore+=(i+1)*200+100;foundFourDice=true;numberOfDice=1;break;}else if(i!==4&&count[i]===4&&count[4]===1){// Cuatro dados de 2, 3, 4 o 6 y un dado de 5\nnewRollScore+=(i+1)*200+50;foundFourDice=true;numberOfDice=1;break;}else if(i!==4&&count[i]===4){// Cuatro dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*200;foundFourDice=true;numberOfDice=2;;break;}}if(foundFourDice){break;}}// Escalera\nconst sixDiceladder1=count[0]>=1&&count[1]>=1&&count[2]>=1&&count[3]>=1&&count[4]>=1;const sixDiceladder2=count[1]>=1&&count[2]>=1&&count[3]>=1&&count[4]>=1&&count[5]>=1;const sixDiceladder3=count[0]===1&&count[1]===1&&count[2]===1&&count[3]===1&&count[4]===1&&count[5]===1;if(sixDiceladder3){// 1, 2, 3, 4, 5, 6\nnewRollScore+=2000;break;}else if(sixDiceladder1&&count[0]===2){// 1, 2, 3, 4, 5 y 1\nnewRollScore+=1600;break;}else if(sixDiceladder1&&count[4]===2||sixDiceladder2&&count[4]===2){// 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\nnewRollScore+=1550;break;}else if(sixDiceladder1||sixDiceladder2){// 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\nnewRollScore+=1500;numberOfDice=1;break;}// Tres pares de dados\nlet countPairs=0;for(let i=0;i<6;i++){if(count[i]===2){countPairs+=1;}}if(countPairs===3){newRollScore+=1500;break;}// 3 dados iguales\nlet sixDiceThreeEq=false;for(let i=0;i<6;i++){if(i!==0&&i!==4&&count[i]===3){// Tres dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*100;sixDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===3){// Tres dados de 1\nnewRollScore+=1000;sixDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===4&&count[i]===3){// Tres dados de 5\nnewRollScore+=500;sixDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}// Dados 1 y 5    \nif(i===0&&count[i]===2){// Dos dados de 1\nnewRollScore+=200;sixDiceThreeEq=true;const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===1||i===4&&count[i]===2){// Dos dados de 5 o Un dado de 1\nnewRollScore+=100;sixDiceThreeEq=true;if(i===4&&count[i]===2){const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else{const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}else if(i===4&&count[i]===1){// Un dado de 5\nnewRollScore+=50;sixDiceThreeEq=true;const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}if(sixDiceThreeEq){if(diceCount===6){mustRollAllTheDice=true;;}else{numberOfDice=numberOfDice-diceCount;if(numberOfDice===0){mustRollAllTheDice=true;;}}break;}case 5:// 5 dados iguales\nif(count[0]===5){// Cinco dados de 1\nnewRollScore+=4000;mustRollAllTheDice=true;;break;}else if(count[4]===5){// Cinco dados de 5\nnewRollScore+=2000;mustRollAllTheDice=true;;break;}else{let foundFiveDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===5){// Cinco dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*400;foundFiveDice=true;break;}}if(foundFiveDice){mustRollAllTheDice=true;;break;}}// 4 dados iguales\nif(count[0]===4&&count[4]===1){// Cuatro dados de 1 y un dado de 5\nnewRollScore+=2050;mustRollAllTheDice=true;;break;}else if(count[0]===4){// Cuatro dados de 1\nnewRollScore+=2000;numberOfDice=1;break;}else if(count[4]===4&&count[0]===1){// Cuatro dados de 5 y un dado de 1\nnewRollScore+=1100;mustRollAllTheDice=true;;break;}else if(count[4]===4){// Cuatro dados de 5\nnewRollScore+=1000;numberOfDice=1;break;}else{let foundFourDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===4&&count[0]===1){// Cuatro dados de 2, 3, 4 o 6 y un dado de 1\nnewRollScore+=(i+1)*200+100;foundFourDice=true;mustRollAllTheDice=true;;break;}else if(i!==4&&count[i]===4&&count[4]===1){// Cuatro dados de 2, 3, 4 o 6 y un dado de 5\nnewRollScore+=(i+1)*200+50;foundFourDice=true;mustRollAllTheDice=true;;break;}else if(i!==4&&count[i]===4){// Cuatro dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*200;foundFourDice=true;numberOfDice=1;break;}}if(foundFourDice){break;}}// Escalera\nconst fiveDiceladder1=count[0]>=1&&count[1]>=1&&count[2]>=1&&count[3]>=1&&count[4]>=1;const fiveDiceladder2=count[1]>=1&&count[2]>=1&&count[3]>=1&&count[4]>=1&&count[5]>=1;if(fiveDiceladder1||fiveDiceladder2){// 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\nnewRollScore+=1500;mustRollAllTheDice=true;;break;}// 3 dados iguales\nlet fiveDiceThreeEq=false;for(let i=0;i<6;i++){if(i!==0&&i!==4&&count[i]===3){// Tres dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*100;fiveDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===3){// Tres dados de 1\nnewRollScore+=1000;fiveDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===4&&count[i]===3){// Tres dados de 5\nnewRollScore+=500;fiveDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}if(i===0&&count[i]===2){// Dos dados de 1\nnewRollScore+=200;fiveDiceThreeEq=true;const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===1||i===4&&count[i]===2){// Dos dados de 5 o Un dado de 1\nnewRollScore+=100;fiveDiceThreeEq=true;if(i===4&&count[i]===2){const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else{const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}else if(i===4&&count[i]===1){// Un dado de 5\nnewRollScore+=50;fiveDiceThreeEq=true;const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}if(fiveDiceThreeEq){if(diceCount===5){mustRollAllTheDice=true;;}else{numberOfDice=numberOfDice-diceCount;if(numberOfDice===0){mustRollAllTheDice=true;;}}break;}case 4:// 4 dados iguales\nif(count[0]===4){// Cuatro dados de 1\nnewRollScore+=2000;mustRollAllTheDice=true;;break;}else if(count[4]===4){// Cuatro dados de 5\nnewRollScore+=1000;mustRollAllTheDice=true;;break;}else{let foundFourDice=false;for(let i=1;i<6;i++){if(i!==4&&count[i]===4){// Cuatro dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*200;foundFourDice=true;break;}}if(foundFourDice){mustRollAllTheDice=true;;break;}}// 3 dados iguales\nlet fourDiceThreeEq=false;for(let i=0;i<6;i++){if(i!==0&&i!==4&&count[i]===3){// Tres dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*100;fourDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===3){// Tres dados de 1\nnewRollScore+=1000;fourDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}else if(i===4&&count[i]===3){// Tres dados de 5\nnewRollScore+=500;fourDiceThreeEq=true;const updateDiceCount=3;diceCount=diceCount+updateDiceCount;}if(i===0&&count[i]===2){// Dos dados de 1\nnewRollScore+=200;fourDiceThreeEq=true;const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===1||i===4&&count[i]===2){// Dos dados de 5 o Un dado de 1\nnewRollScore+=100;fourDiceThreeEq=true;if(i===4&&count[i]===2){const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else{const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}else if(i===4&&count[i]===1){// Un dado de 5\nnewRollScore+=50;fourDiceThreeEq=true;const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}if(fourDiceThreeEq){if(diceCount===4){mustRollAllTheDice=true;;}else{numberOfDice=numberOfDice-diceCount;}break;}case 3:// 3 dados iguales\nlet threeDiceThreeEq=false;for(let i=0;i<6;i++){if(i!==0&&i!==4&&count[i]===3){// Tres dados de 2, 3, 4 o 6\nnewRollScore+=(i+1)*100;threeDiceThreeEq=true;mustRollAllTheDice=true;;}else if(i===0&&count[i]===3){// Tres dados de 1\nnewRollScore+=1000;threeDiceThreeEq=true;mustRollAllTheDice=true;;}else if(i===4&&count[i]===3){// Tres dados de 5\nnewRollScore+=500;threeDiceThreeEq=true;mustRollAllTheDice=true;;}if(i===0&&count[i]===2){// Dos dados de 1\nnewRollScore+=200;threeDiceThreeEq=true;const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else if(i===0&&count[i]===1||i===4&&count[i]===2){// Dos dados de 5 o Un dado de 1\nnewRollScore+=100;threeDiceThreeEq=true;if(i===4&&count[i]===2){const updateDiceCount=2;diceCount=diceCount+updateDiceCount;}else{const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}else if(i===4&&count[i]===1){// Un dado de 5\nnewRollScore+=50;threeDiceThreeEq=true;const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}if(threeDiceThreeEq){if(diceCount===3){mustRollAllTheDice=true;;}else{numberOfDice=numberOfDice-diceCount;}break;}case 2:// 2 dados iguales\nlet twoDiceTh=false;for(let i=0;i<6;i++){if(i===0&&count[i]===2){// Dos dados de 1\nnewRollScore+=200;twoDiceTh=true;mustRollAllTheDice=true;;}else if(i===0&&count[i]===1||i===4&&count[i]===2){// Dos dados de 5 o Un dado de 1\nnewRollScore+=100;twoDiceTh=true;if(i===4&&count[i]===2){mustRollAllTheDice=true;;}else{const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}else if(i===4&&count[i]===1){// Un dado de 5\nnewRollScore+=50;twoDiceTh=true;const updateDiceCount=1;diceCount=diceCount+updateDiceCount;}}if(twoDiceTh){if(diceCount===2){mustRollAllTheDice=true;;}else{numberOfDice=numberOfDice-diceCount;}break;}case 1:// 1 dado\nlet oneDiceTh=false;if(diceAmount.length===1){if(count[0]===1){// Un dado de 1\nnewRollScore+=100;oneDiceTh=true;}else if(count[4]===1){// Un dado de 5\nnewRollScore+=50;oneDiceTh=true;}}if(oneDiceTh){mustRollAllTheDice=true;;break;}default:numberOfDice=6;let updatePure=true;if(batataCaliente||!playerInGame[currentPlayerIndex]){updatePure=false;}if(updatePure){alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");}setPure(updatePure);break;}// Tirada forzosa\nif(playerInGame[currentPlayerIndex]&&mustRollAllTheDice&&!batataCaliente){alert(\"No hay más dados por tirar, debes lanzar todos nuevamente!\");setForcedThrow(true);numberOfDice=6;mustRollAllTheDice=false;}// Actualizar el puntaje del turno y puntaje de la tirada\nif(batataCaliente&&isOdd(diceAmount)){// Actualizacion de puntos por Batata Caliente\nif(totalScore[currentPlayerIndex]-1000<700){const newTotalScore=[...totalScore];newTotalScore[currentPlayerIndex]=700;setTotalScore(newTotalScore);}else{const newTotalScore=[...totalScore];newTotalScore[currentPlayerIndex]-=1000;setTotalScore(newTotalScore);}}else{setRollScore(newRollScore);setTurnScore(turnScore+newRollScore);setUpdateNumberOfDice(numberOfDice);}if(batatearOn){setCanBatatear(false);setBatatearON(false);console.log(\"Batatear OFF\");}setRoll(roll+1);// Contador de tiradas\n}};const endTurn=()=>{// Finalizar el turno del jugador\n// Actualización de puntajes y cambio de turno\nif(playerInGame[currentPlayerIndex]){if(currentPlayerIndex===currentScoreIndex&&!maximumPointsSupperpassed&&!pure){// Actualiza los puntos si no sobrepasa el límite de puntuación\nif(fortuneBatataOn[currentPlayerIndex]&&fortuneBatataCounter[currentPlayerIndex]===2){// Actualiza el puntaje si se activo Batata de la fortuna\nconst newTotalScore=[...totalScore];newTotalScore[currentScoreIndex]+=turnScore*2;setTotalScore(newTotalScore);}else{// Actualiza de forma normal el puntaje del jugador\nconst newTotalScore=[...totalScore];newTotalScore[currentScoreIndex]+=turnScore;setTotalScore(newTotalScore);}}}if(batataCaliente&&!forcedThrow){setForcedThrow(true);if(currentPlayerIndex===players.length-1){setForcedThrow(false);}}// Actualizar contador de espera de Batata de la fortuna\nif(fortuneBatataOn[currentPlayerIndex]&&!batataCaliente||fortuneBatataCounter[currentPlayerIndex]>0&&!batataCaliente){const updateFortuneBatataCounter=[...fortuneBatataCounter];updateFortuneBatataCounter[currentPlayerIndex]+=1;setFortuneBatataCounter(updateFortuneBatataCounter);}//  Finalizar Batata de la fortuna\nif(fortuneBatataOn[currentPlayerIndex]&&fortuneBatataCounter[currentPlayerIndex]===3){const updateFortuneBatata=[...fortuneBatataOn];updateFortuneBatata[currentPlayerIndex]=false;setFortuneBatataOn(updateFortuneBatata);alert(\"Finalizó la Batata de la fortuna para el \"+players[currentPlayerIndex]);console.log(\"Finalizó la Batata de la fortuna para el \"+players[currentPlayerIndex]);}// Resetear tiempo de espera para volver a usar Batata de la fortuna\nif(fortuneBatataCounter[currentPlayerIndex]===5){const updateFortuneBatataCounter=[...fortuneBatataCounter];updateFortuneBatataCounter[currentPlayerIndex]=0;setFortuneBatataCounter(updateFortuneBatataCounter);}setTurnCounter(prevTurnCounter=>prevTurnCounter+1);setCurrentPlayerIndex(prevIndex=>(prevIndex+1)%players.length);setCurrentScoreIndex(prevIndex=>(prevIndex+1)%totalScore.length);setTurnScore(0);setRollScore(0);setRoll(0);setRollCondition(true);setMaximumPointsSupperpassed(false);setUpdateNumberOfDice(6);setPure(false);};const batatear=()=>{// Función especial Batatear\nif(canBatatear){setBatatearON(true);console.log(\"Batatear ON\");}};const batataDeLaFortuna=()=>{// Función especial batata de la fortuna\nif(playerMidGame[currentPlayerIndex]&&fortuneBatataCounter[currentPlayerIndex]===0){const updateFortuneBatata=[...fortuneBatataOn];updateFortuneBatata[currentPlayerIndex]=true;setFortuneBatataOn(updateFortuneBatata);alert(\"Comenzó la Batata de la fortuna para el \"+players[currentPlayerIndex]);console.log(\"Comenzó la Batata de la fortuna para el \"+players[currentPlayerIndex]);}if(fortuneBatataCounter[currentPlayerIndex]>0&&fortuneBatataCounter[currentPlayerIndex]<6){alert(players[currentPlayerIndex]+\" debes esperar \"+(6-fortuneBatataCounter[currentPlayerIndex])+\" turno/s para volver a utilizar la Batata de la fortuna!\");}};const batatazo=()=>{// Función especial batatazo\n//codigo\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(Modal,{isOpen:isModalOpen,onClose:handleCloseModal,onConfirm:handleConfirm}),!isModalOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsx(Menu,{}),/*#__PURE__*/_jsx(\"div\",{className:\"dice-container\",children:diceValues.map((value,index)=>/*#__PURE__*/_jsx(Dice,{number:value},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttons-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"turn-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"roll-button\",onClick:rollDice,disabled:!rollCondition||gameOver||maximumPointsSupperpassed||pure,children:\"Tirar los dados\"}),/*#__PURE__*/_jsx(\"button\",{className:\"end-turn-button\",onClick:endTurn,disabled:gameOver||forcedThrow,children:\"Finalizar turno\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"special-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"batatear\",onClick:batatear,disabled:gameOver||maximumPointsSupperpassed||pure||!canBatatear,children:\"Batatear\"}),/*#__PURE__*/_jsx(\"button\",{className:\"batata-de-la-fortuna\",onClick:batataDeLaFortuna,disabled:gameOver||forcedThrow||maximumPointsSupperpassed||pure,children:\"Batata de la fortuna\"}),/*#__PURE__*/_jsx(\"button\",{className:\"batatazo\",onClick:batatazo//disabled={gameOver || forcedThrow || maximumPointsSupperpassed || pure}\n,children:\"Batatazo\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-points\",children:[/*#__PURE__*/_jsx(\"p\",{children:currentPlayer}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Puntaje de la tirada: \",rollScore]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Puntaje acumulado del turno: \",turnScore]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Puntaje total del jugador: \",totalScore[currentScoreIndex]]})]})]})]});};export default Game;","map":{"version":3,"names":["React","useState","useEffect","Dice","Modal","Menu","jsx","_jsx","jsxs","_jsxs","Game","roll","setRoll","rollScore","setRollScore","rollCondition","setRollCondition","gameOver","setGameOver","maximumPointsSupperpassed","setMaximumPointsSupperpassed","turnScore","setTurnScore","diceValues","setDiceValues","updateNumberOfDice","setUpdateNumberOfDice","isModalOpen","setIsModalOpen","players","setPlayers","totalScore","setTotalScore","playerInGame","setPlayerInGame","playerMidGame","setPlayerMidGame","currentPlayerIndex","setCurrentPlayerIndex","currentScoreIndex","setCurrentScoreIndex","pure","setPure","forcedThrow","setForcedThrow","turnCounter","setTurnCounter","activateTurnCounter","setActivateTurnCounter","roundCounter","setRoundCounter","batataCaliente","setBatataCaliente","batatearOn","setBatatearON","canBatatear","setCanBatatear","fortuneBatataOn","setFortuneBatataOn","fortuneBatataCounter","setFortuneBatataCounter","currentPlayer","isOdd","number","handleCloseModal","handleConfirm","numPlayers","playerNames","playerScores","inGame","length","updateFortuneBatata","Array","from","updatePlayerInGame","alert","updateRollCondition","updateGameState","updatePlayerMidGame","every","player","prevRoundCounter","console","log","rollDice","diceCount","diceAmount","numberOfDice","mustRollAllTheDice","map","Math","floor","random","invertDice","num","undefined","count","forEach","value","newRollScore","foundSixDice","i","foundFiveDice","foundFourDice","sixDiceladder1","sixDiceladder2","sixDiceladder3","countPairs","sixDiceThreeEq","updateDiceCount","fiveDiceladder1","fiveDiceladder2","fiveDiceThreeEq","fourDiceThreeEq","threeDiceThreeEq","twoDiceTh","oneDiceTh","updatePure","newTotalScore","endTurn","updateFortuneBatataCounter","prevTurnCounter","prevIndex","batatear","batataDeLaFortuna","batatazo","className","children","isOpen","onClose","onConfirm","index","onClick","disabled"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dice from './Dice';\r\nimport Modal from './Modal';\r\nimport Menu from './Menu';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [rollCondition, setRollCondition] = useState(true);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n    const [updateNumberOfDice, setUpdateNumberOfDice] = useState(6);\r\n    const [isModalOpen, setIsModalOpen] = useState(true);\r\n    const [players, setPlayers] = useState([]);\r\n    const [totalScore, setTotalScore] = useState([]);\r\n    const [playerInGame, setPlayerInGame] = useState([]);\r\n    const [playerMidGame, setPlayerMidGame] = useState([]);\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n    const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\r\n    const [pure, setPure] = useState(false);\r\n    const [forcedThrow, setForcedThrow] = useState(false);\r\n    const [turnCounter, setTurnCounter] = useState(0);\r\n    const [activateTurnCounter, setActivateTurnCounter] = useState(false);\r\n    const [roundCounter, setRoundCounter] = useState(-1);\r\n    const [batataCaliente, setBatataCaliente] = useState(false);\r\n    const [batatearOn, setBatatearON] = useState(false);\r\n    const [canBatatear, setCanBatatear] = useState(false);\r\n    const [fortuneBatataOn, setFortuneBatataOn] = useState([]);\r\n    const [fortuneBatataCounter, setFortuneBatataCounter] = useState([]);\r\n\r\n    const currentPlayer = players[currentPlayerIndex];\r\n\r\n    const isOdd = number => number % 2 !== 0;\r\n    \r\n    const handleCloseModal = () => { // Maneja la ventana de ingreso de jugadores\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => { // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\r\n        setPlayers(playerNames);\r\n        setTotalScore(playerScores);\r\n        setPlayerInGame(inGame);\r\n    };\r\n\r\n    useEffect(() => { // Condiciones por puntaje del jugador (Ingreso al juego, Ganar, Límite para funciones especiales...)\r\n\r\n        // Crear \"Batata de la fortuna\"\r\n        if (fortuneBatataOn.length === 0) {\r\n            const updateFortuneBatata = [...playerInGame];\r\n            setFortuneBatataOn(updateFortuneBatata);\r\n            setFortuneBatataCounter(Array.from({ length: updateFortuneBatata.length }, () => 0));\r\n        }\r\n\r\n        // Entrada al \"Juego\"\r\n        if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) { \r\n            // El jugador ingresa al juego\r\n            const updatePlayerInGame = [...playerInGame];\r\n            updatePlayerInGame[currentPlayerIndex] = true;\r\n            setPlayerInGame(updatePlayerInGame);\r\n            alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\r\n            \r\n            // Finaliza el turno para el jugador recién ingresado al juego\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n            alert(\"Tu turno ha finalizado!\");\r\n        }\r\n\r\n        // Ganar el juego\r\n        if ((totalScore[currentScoreIndex] + turnScore) === 10000) {\r\n            const updateGameState = true;\r\n            setGameOver(updateGameState);\r\n            alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\")\r\n        } else if ((totalScore[currentScoreIndex] + turnScore) > 10000) {\r\n            const updateGameState = true;\r\n            setMaximumPointsSupperpassed(updateGameState);\r\n            alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\r\n        }\r\n\r\n        // Límite para funciones especiales\r\n        if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] < 5000) {\r\n            const updatePlayerMidGame = [...playerMidGame];\r\n            updatePlayerMidGame[currentPlayerIndex] = true;\r\n            setPlayerMidGame(updatePlayerMidGame);\r\n        } else if (playerInGame[currentPlayerIndex] && totalScore[currentPlayerIndex] > 5000) {\r\n            const updatePlayerMidGame = [...playerMidGame]; \r\n            updatePlayerMidGame[currentPlayerIndex] = false;\r\n            setPlayerMidGame(updatePlayerMidGame);\r\n        }\r\n\r\n        // Finalizar el turno para el jugador que haya usado la Batata de la fortuna\r\n        if (fortuneBatataOn[currentPlayerIndex] && (fortuneBatataCounter[currentPlayerIndex] === 1 || fortuneBatataCounter[currentPlayerIndex] === 2)) {\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n            alert(players[currentPlayerIndex] + \" debes esperar \" + (3 - fortuneBatataCounter[currentPlayerIndex]) + \" turno/s para poder lanzar los dados!\");\r\n        }\r\n    }, [turnScore, totalScore[currentPlayerIndex]]);\r\n\r\n    useEffect(() => { // Actualizar cantidad de rondas y habilitar \"Batatear\"\r\n        // Activar contador de turnos\r\n        if (players.length > 2 && playerInGame.every(player => player) && currentPlayerIndex === 0 && !activateTurnCounter) {\r\n            setActivateTurnCounter(true);\r\n            setTurnCounter(0);\r\n        }\r\n\r\n        // Contador de rondas\r\n        if (turnCounter === players.length && turnCounter > 1) {\r\n            if (playerInGame.every(player => player) && currentPlayer[0]){\r\n                setRoundCounter(prevRoundCounter => prevRoundCounter + 1);\r\n            }\r\n            console.log(\"Ronda = \" + roundCounter);\r\n            setTurnCounter(0);\r\n        }\r\n\r\n        // Habilitar botón de Batatear\r\n        if (playerInGame[currentPlayerIndex]) {\r\n            setCanBatatear(true);\r\n        }\r\n        if (batataCaliente) {\r\n            setCanBatatear (false);\r\n        }\r\n    }, [turnCounter]);\r\n\r\n    useEffect(() => { // Batata Caliente ON/OFF\r\n        if (roundCounter === 5) {\r\n            setBatataCaliente(true);\r\n            setForcedThrow(true);\r\n            alert(\"¡¡¡Batata caliente!!!\");\r\n        } else if (roundCounter > 5) {\r\n            setBatataCaliente(false);\r\n            setRoundCounter(0);\r\n        }\r\n    }, [roundCounter]);\r\n\r\n    const rollDice = () => { // Tirar los dados\r\n\r\n        let diceCount = 0;\r\n        let diceAmount = [...Array(6)];\r\n\r\n        if (roll === 0) {\r\n            setUpdateNumberOfDice(6);\r\n        }\r\n        let numberOfDice = updateNumberOfDice;\r\n        let mustRollAllTheDice = false;\r\n\r\n        if (forcedThrow) {\r\n            setForcedThrow(false);\r\n        }\r\n\r\n        // Verificar si el jugador está dentro del juego para permitir más tiradas\r\n        if (roll === 1 && turnScore < 700 &&!playerInGame[currentPlayerIndex]) {\r\n            alert(\"No puedes tirar más los dados, no estás dentro del juego\");\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n        } else {\r\n            if (batataCaliente) { // Cambia la cantidad de dados para la Batata Caliente\r\n                diceAmount = [1].map(() => Math.floor(Math.random() * 6) + 1);\r\n                if (roll === 0) {\r\n                    setRollCondition(false);\r\n                }\r\n            } else {\r\n                diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1); // Generar números aleatorios para cada dado\r\n                if (batatearOn) { // Batatear los dados\r\n                    const invertDice = {\r\n                        1: 6,\r\n                        6: 1,\r\n                        2: 5,\r\n                        5: 2,\r\n                        3: 4,\r\n                        4: 3\r\n                    };\r\n                    diceAmount = diceAmount.map(num => invertDice[num] !== undefined ? invertDice[num] : num);\r\n                };\r\n            }\r\n\r\n            // Actualizar valores de los dados\r\n            setDiceValues(diceAmount);\r\n    \r\n            // Contador de cada número del 1 al 6\r\n            const count = [0, 0, 0, 0, 0, 0];\r\n            diceAmount.forEach(value => {\r\n                count[value - 1]++;\r\n            });\r\n    \r\n            // Calcular puntaje de la tirada\r\n            let newRollScore = 0;\r\n    \r\n            // Puntajes según las combinaciones de dados\r\n            switch (diceAmount.length) {\r\n                \r\n                // Cada Case es la cantidad de dados tirados\r\n                case 6:\r\n                    // 6 dados iguales\r\n                    if (count[0] === 6) { // Seis dados de 1\r\n                        newRollScore += 6000;\r\n                        break;\r\n                    } else if (count[4] === 6) { // Seis dados de 5\r\n                        newRollScore += 3000;\r\n                        break;\r\n                    } else { // Seis dados de 2, 3, 4 o 6\r\n                        let foundSixDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 6) {\r\n                                newRollScore += (i + 1) * 600;\r\n                                foundSixDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundSixDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 5 dados iguales\r\n                    if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                        newRollScore += 4050;\r\n                        break;\r\n                    } else if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 400 + 100;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 400 + 50;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 2;;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                        newRollScore += 1200;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        numberOfDice = 2;;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                                newRollScore += (i + 1) * 200 + 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 150;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 2;;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                    const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n    \r\n                    if (sixDiceladder3) { // 1, 2, 3, 4, 5, 6\r\n                        newRollScore += 2000;\r\n                        break;    \r\n                    } else if (sixDiceladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                        newRollScore += 1600;\r\n                        break;\r\n                    } else if ((sixDiceladder1 && count[4] === 2) || (sixDiceladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                        newRollScore += 1550;\r\n                        break;\r\n                    } else if ((sixDiceladder1) || (sixDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    }\r\n    \r\n                    // Tres pares de dados\r\n                    let countPairs = 0;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (count[i] === 2) {\r\n                            countPairs += 1;\r\n                        }\r\n                    }\r\n                    if (countPairs === 3) {\r\n                        newRollScore += 1500;\r\n                        break;\r\n                    }\r\n\r\n                    // 3 dados iguales\r\n                    let sixDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    // Dados 1 y 5    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            sixDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (sixDiceThreeEq) {\r\n                        if (diceCount === 6) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                            if (numberOfDice === 0) {\r\n                                mustRollAllTheDice = true;;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                \r\n                case 5:\r\n                    // 5 dados iguales\r\n                    if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            mustRollAllTheDice = true;;\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        numberOfDice = 1;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                mustRollAllTheDice = true;;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                mustRollAllTheDice = true;;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                numberOfDice = 1;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n    \r\n                    if ((fiveDiceladder1) || (fiveDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let fiveDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fiveDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fiveDiceThreeEq) {\r\n                        if (diceCount === 5) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                            if (numberOfDice === 0) {\r\n                                mustRollAllTheDice = true;;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 4:\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            mustRollAllTheDice = true;;\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    // 3 dados iguales\r\n                    let fourDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fourDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fourDiceThreeEq) {\r\n                        if (diceCount === 4) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 3:\r\n                    // 3 dados iguales\r\n                    let threeDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            threeDiceThreeEq = true;\r\n                            mustRollAllTheDice = true;;\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            threeDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (threeDiceThreeEq) {\r\n                        if (diceCount === 3) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 2:\r\n                    // 2 dados iguales\r\n                    let twoDiceTh = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            twoDiceTh = true;\r\n                            mustRollAllTheDice = true;;\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            twoDiceTh = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                mustRollAllTheDice = true;;\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                diceCount = (diceCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            twoDiceTh = true;\r\n                            const updateDiceCount = 1;\r\n                            diceCount = (diceCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (twoDiceTh) {\r\n                        if (diceCount === 2) {\r\n                            mustRollAllTheDice = true;;\r\n                        } else {\r\n                            numberOfDice = (numberOfDice - diceCount);\r\n                        }\r\n                        break;\r\n                    }\r\n    \r\n                case 1:\r\n                    // 1 dado\r\n                    let oneDiceTh = false;\r\n                    if (diceAmount.length === 1) {\r\n                        if (count[0] === 1) { // Un dado de 1\r\n                            newRollScore += 100;\r\n                            oneDiceTh = true;\r\n                        } else if (count[4] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            oneDiceTh = true;\r\n                        }\r\n                    }\r\n                    if (oneDiceTh) {\r\n                        mustRollAllTheDice = true;;\r\n                        break;\r\n                    }\r\n    \r\n                default: \r\n                    numberOfDice = 6;\r\n                    let updatePure = true;\r\n                    if (batataCaliente || !playerInGame[currentPlayerIndex]) {\r\n                        updatePure = false;\r\n                    }\r\n                    if (updatePure) {\r\n                        alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\r\n                    }\r\n                    setPure(updatePure);\r\n                    break;\r\n            }\r\n\r\n            // Tirada forzosa\r\n            if (playerInGame[currentPlayerIndex] && mustRollAllTheDice && !batataCaliente) {\r\n                alert(\"No hay más dados por tirar, debes lanzar todos nuevamente!\");\r\n                setForcedThrow(true);\r\n                numberOfDice = 6\r\n                mustRollAllTheDice = false;\r\n            }\r\n\r\n            // Actualizar el puntaje del turno y puntaje de la tirada\r\n            if (batataCaliente && isOdd(diceAmount)) { // Actualizacion de puntos por Batata Caliente\r\n                if ((totalScore[currentPlayerIndex] - 1000) < 700 ) {\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentPlayerIndex] = 700;\r\n                    setTotalScore(newTotalScore); \r\n                } else {\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentPlayerIndex] -= 1000;\r\n                    setTotalScore(newTotalScore); \r\n                }\r\n            } else {\r\n                setRollScore(newRollScore);\r\n                setTurnScore(turnScore + newRollScore);\r\n                setUpdateNumberOfDice(numberOfDice);\r\n            }\r\n\r\n            if (batatearOn) {\r\n                setCanBatatear(false);\r\n                setBatatearON(false);\r\n                console.log(\"Batatear OFF\");\r\n            }\r\n            setRoll(roll + 1); // Contador de tiradas\r\n        }\r\n    };\r\n\r\n    const endTurn = () => { // Finalizar el turno del jugador\r\n\r\n        // Actualización de puntajes y cambio de turno\r\n        if (playerInGame[currentPlayerIndex]) {\r\n            if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed && !pure) { // Actualiza los puntos si no sobrepasa el límite de puntuación\r\n                if (fortuneBatataOn[currentPlayerIndex] && fortuneBatataCounter[currentPlayerIndex] === 2) { // Actualiza el puntaje si se activo Batata de la fortuna\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentScoreIndex] += (turnScore*2);\r\n                    setTotalScore(newTotalScore);\r\n                } else { // Actualiza de forma normal el puntaje del jugador\r\n                    const newTotalScore = [...totalScore];\r\n                    newTotalScore[currentScoreIndex] += turnScore;\r\n                    setTotalScore(newTotalScore);\r\n                }\r\n            }\r\n        }\r\n        if(batataCaliente && !forcedThrow) {\r\n            setForcedThrow(true);\r\n            if (currentPlayerIndex === players.length - 1) {\r\n                setForcedThrow(false);\r\n            }\r\n        }\r\n\r\n        // Actualizar contador de espera de Batata de la fortuna\r\n        if ((fortuneBatataOn[currentPlayerIndex] && !batataCaliente) || (fortuneBatataCounter[currentPlayerIndex] > 0 && !batataCaliente)) {\r\n            const updateFortuneBatataCounter = [...fortuneBatataCounter];\r\n            updateFortuneBatataCounter[currentPlayerIndex] += 1;\r\n            setFortuneBatataCounter(updateFortuneBatataCounter);\r\n        }\r\n        //  Finalizar Batata de la fortuna\r\n        if (fortuneBatataOn[currentPlayerIndex] && fortuneBatataCounter[currentPlayerIndex] === 3) {\r\n            const updateFortuneBatata = [...fortuneBatataOn];\r\n            updateFortuneBatata[currentPlayerIndex] = false;\r\n            setFortuneBatataOn(updateFortuneBatata);\r\n            alert(\"Finalizó la Batata de la fortuna para el \" + players[currentPlayerIndex]);\r\n            console.log(\"Finalizó la Batata de la fortuna para el \" + players[currentPlayerIndex]);\r\n        }\r\n        // Resetear tiempo de espera para volver a usar Batata de la fortuna\r\n        if (fortuneBatataCounter[currentPlayerIndex] === 5) {\r\n            const updateFortuneBatataCounter = [...fortuneBatataCounter];\r\n            updateFortuneBatataCounter[currentPlayerIndex] = 0;\r\n            setFortuneBatataCounter(updateFortuneBatataCounter);\r\n        }\r\n\r\n        setTurnCounter(prevTurnCounter => prevTurnCounter + 1);\r\n        setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % players.length);\r\n        setCurrentScoreIndex((prevIndex) => (prevIndex + 1) % totalScore.length);\r\n        setTurnScore(0);\r\n        setRollScore(0);\r\n        setRoll(0);\r\n        setRollCondition(true);\r\n        setMaximumPointsSupperpassed(false);\r\n        setUpdateNumberOfDice(6);\r\n        setPure(false);\r\n    }\r\n\r\n    const batatear = () => { // Función especial Batatear\r\n        if (canBatatear) {\r\n            setBatatearON(true);\r\n            console.log(\"Batatear ON\");\r\n        }\r\n    };\r\n\r\n    const batataDeLaFortuna = () => { // Función especial batata de la fortuna\r\n        if (playerMidGame[currentPlayerIndex] && fortuneBatataCounter[currentPlayerIndex] === 0) {\r\n            const updateFortuneBatata = [...fortuneBatataOn];\r\n            updateFortuneBatata[currentPlayerIndex] = true;\r\n            setFortuneBatataOn(updateFortuneBatata);\r\n            alert(\"Comenzó la Batata de la fortuna para el \" + players[currentPlayerIndex]);\r\n            console.log(\"Comenzó la Batata de la fortuna para el \" + players[currentPlayerIndex]);\r\n        }\r\n        if (fortuneBatataCounter[currentPlayerIndex] > 0 && fortuneBatataCounter[currentPlayerIndex] < 6) {\r\n            alert(players[currentPlayerIndex] + \" debes esperar \" + (6 - fortuneBatataCounter[currentPlayerIndex]) + \" turno/s para volver a utilizar la Batata de la fortuna!\");\r\n        }\r\n    };\r\n    \r\n\r\n    const batatazo = () => { // Función especial batatazo\r\n        //codigo\r\n    };\r\n    \r\n    return (\r\n        <div className=\"game\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={handleCloseModal} \r\n                onConfirm={handleConfirm}\r\n            />\r\n            {!isModalOpen && (\r\n                <div className='game-container'>\r\n                    <Menu />\r\n                    <div className=\"dice-container\">\r\n                        {diceValues.map((value, index) => (\r\n                            <Dice key={index} number={value} />\r\n                        ))}\r\n                    </div>\r\n                    <div className='buttons-container'>\r\n                        <div className='turn-buttons'>\r\n                            <button className=\"roll-button\" \r\n                                onClick={rollDice}\r\n                                disabled={!rollCondition || gameOver || maximumPointsSupperpassed || pure}\r\n                            >\r\n                                Tirar los dados\r\n                            </button>\r\n                            <button className=\"end-turn-button\" \r\n                                onClick={endTurn}\r\n                                disabled={gameOver || forcedThrow}\r\n                            >\r\n                                Finalizar turno\r\n                            </button>\r\n                        </div>\r\n                        <div className='special-buttons'>\r\n                            <button className=\"batatear\" \r\n                                onClick={batatear}\r\n                                disabled={gameOver || maximumPointsSupperpassed || pure || !canBatatear}\r\n                            >\r\n                                Batatear\r\n                            </button>\r\n                            <button className=\"batata-de-la-fortuna\" \r\n                                onClick={batataDeLaFortuna}\r\n                                disabled={gameOver || forcedThrow || maximumPointsSupperpassed || pure}\r\n                            >\r\n                                Batata de la fortuna\r\n                            </button>\r\n                            <button className=\"batatazo\" \r\n                                onClick={batatazo}\r\n                                //disabled={gameOver || forcedThrow || maximumPointsSupperpassed || pure}\r\n                            >\r\n                                Batatazo\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"player-points\">\r\n                        <p>{currentPlayer}</p>\r\n                        <p>Puntaje de la tirada: {rollScore}</p>\r\n                        <p>Puntaje acumulado del turno: {turnScore}</p>\r\n                        <p>Puntaje total del jugador: {totalScore[currentScoreIndex]}</p> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}