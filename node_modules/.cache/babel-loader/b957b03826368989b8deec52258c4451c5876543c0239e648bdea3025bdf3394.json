{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jose\\\\Desktop\\\\Proyectos\\\\la-batata\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dice from './Dice';\nimport Modal from './Modal';\nimport '../styles/Game.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [roll, setRoll] = useState(0);\n  const [rollScore, setRollScore] = useState(0);\n  const [rollCondition, setRollCondition] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\n  const [turnScore, setTurnScore] = useState(0);\n  const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\n  const [numberOfDice, setNumberOfDice] = useState(6);\n  const [diceCount, setDiceCount] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(true);\n  const [players, setPlayers] = useState([]);\n  const [totalScore, setTotalScore] = useState([]);\n  const [playerInGame, setPlayerInGame] = useState([]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\n  const currentPlayer = players[currentPlayerIndex];\n  const handleCloseModal = () => {\n    // Maneja la ventana de ingreso de jugadores\n    setIsModalOpen(false);\n  };\n  const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => {\n    // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\n    setPlayers(playerNames);\n    setTotalScore(playerScores);\n    setPlayerInGame(inGame);\n  };\n  useEffect(() => {\n    // Entrada al \"Juego\"\n    if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) {\n      // El jugador ingresa al juego\n      const updatePlayerInGame = [...playerInGame];\n      updatePlayerInGame[currentPlayerIndex] = true;\n      setPlayerInGame(updatePlayerInGame);\n      alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\n\n      // Finaliza el turno para el jugador recién ingresado al juego\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n      alert(\"Tu turno ha finalizado!\");\n    }\n\n    // Ganar el juego\n    if (totalScore[currentScoreIndex] + turnScore === 10000) {\n      const updateGameState = true;\n      setGameOver(updateGameState);\n      alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\");\n    } else if (totalScore[currentScoreIndex] + turnScore > 10000) {\n      const updateGameState = true;\n      setMaximumPointsSupperpassed(updateGameState);\n      alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\n    }\n  }, [turnScore]);\n  const rollDice = () => {\n    // Tirar los dados\n\n    // Verificar si el jugador está dentro del juego para permitir más tiradas\n    if (roll === 1 && turnScore < 700 && !playerInGame[currentPlayerIndex]) {\n      alert(\"No puedes tirar más los dados, no estás dentro del juego\");\n      const updateRollCondition = false;\n      setRollCondition(updateRollCondition);\n    } else {\n      // Generar números aleatorios para cada dado\n      //const diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1);\n      const diceAmount = [6, 6, 6, 1, 5, 2];\n\n      // Actualizar valores de los dados\n      setDiceValues(diceAmount);\n\n      // Contador de cada número del 1 al 6\n      const count = [0, 0, 0, 0, 0, 0];\n      diceAmount.forEach(value => {\n        count[value - 1]++;\n      });\n\n      // Calcular puntaje de la tirada\n      let newRollScore = 0;\n\n      // Puntajes según las combinaciones de dados\n      switch (diceAmount.length) {\n        // Cada Case es la cantidad de dados tirados\n        case 6:\n          // 6 dados iguales\n          if (count[0] === 6) {\n            // Seis dados de 1\n            newRollScore += 6000;\n            break;\n          } else if (count[4] === 6) {\n            // Seis dados de 5\n            newRollScore += 3000;\n            break;\n          } else {\n            // Seis dados de 2, 3, 4 o 6\n            let foundSixDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 6) {\n                newRollScore += (i + 1) * 600;\n                foundSixDice = true;\n                break;\n              }\n            }\n            if (foundSixDice) {\n              break;\n            }\n          }\n\n          // 5 dados iguales\n          if (count[0] === 5 && count[4] === 1) {\n            // Cinco dados de 1 y un dado de 5\n            newRollScore += 4050;\n            break;\n          } else if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            setNumberOfDice(1);\n            break;\n          } else if (count[4] === 5 && count[0] === 1) {\n            // Cinco dados de 5 y un dado de 1\n            newRollScore += 2100;\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            setNumberOfDice(1);\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5 && count[0] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 400 + 100;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5 && count[4] === 1) {\n                // Cinco dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 400 + 50;\n                foundFiveDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                setNumberOfDice(1);\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 2) {\n            // Cuatro dados de 1 y dos dados de 5\n            newRollScore += 2100;\n            break;\n          } else if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            setNumberOfDice(1);\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            setNumberOfDice(2);\n            break;\n          } else if (count[4] === 4 && count[0] === 2) {\n            // Cuatro dados de 5 y dos dados de 1\n            newRollScore += 1200;\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            setNumberOfDice(1);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            setNumberOfDice(2);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\n                newRollScore += (i + 1) * 200 + 200;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 2) {\n                // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\n                newRollScore += (i + 1) * 200 + 150;\n                foundFourDice = true;\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                setNumberOfDice(1);\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                setNumberOfDice(1);\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                setNumberOfDice(2);\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\n          if (sixDiceladder3) {\n            // 1, 2, 3, 4, 5, 6\n            newRollScore += 2000;\n            break;\n          } else if (sixDiceladder1 && count[0] === 2) {\n            // 1, 2, 3, 4, 5 y 1\n            newRollScore += 1600;\n            break;\n          } else if (sixDiceladder1 && count[4] === 2 || sixDiceladder2 && count[4] === 2) {\n            // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\n            newRollScore += 1550;\n            break;\n          } else if (sixDiceladder1 || sixDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            setNumberOfDice(1);\n            break;\n          }\n\n          // Tres pares de dados\n          let countPairs = 0;\n          for (let i = 0; i < 6; i++) {\n            if (count[i] === 2) {\n              countPairs += 1;\n            }\n          }\n          if (countPairs === 3) {\n            newRollScore += 1500;\n            break;\n          }\n\n          // 3 dados iguales\n          let sixDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n              console.log(\"Tres dados de 2, 3, 4 o 6\");\n              console.log(\"diceCount = \" + diceCount);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n            // Dados 1 y 5    \n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 2;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              sixDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              } else {\n                const updateDiceCount = 1;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n                console.log(\"Un dado de 1\");\n                console.log(\"diceCount = \" + diceCount);\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              sixDiceThreeEq = true;\n              const updateDiceCount = 1;\n              setDiceCount(diceCount + updateDiceCount);\n              console.log(\"Un dado de 5\");\n              console.log(\"diceCount = \" + diceCount);\n            }\n            console.log(\"diceCount al final del for = \" + diceCount);\n          }\n          if (sixDiceThreeEq) {\n            console.log(\"diceCount = \" + diceCount);\n            if (diceCount === 6) {\n              setNumberOfDice(6);\n            } else {\n              setNumberOfDice(prevCount => prevCount - diceCount);\n              console.log(\"numberOfDice = \" + numberOfDice);\n              if (numberOfDice === 0) {\n                setNumberOfDice(6);\n              }\n            }\n            //setDiceCount(0);\n            console.log(\"Termina\");\n            break;\n          }\n        case 5:\n          // 5 dados iguales\n          if (count[0] === 5) {\n            // Cinco dados de 1\n            newRollScore += 4000;\n            setNumberOfDice(6);\n            break;\n          } else if (count[4] === 5) {\n            // Cinco dados de 5\n            newRollScore += 2000;\n            setNumberOfDice(6);\n            break;\n          } else {\n            let foundFiveDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 5) {\n                // Cinco dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 400;\n                foundFiveDice = true;\n                break;\n              }\n            }\n            if (foundFiveDice) {\n              setNumberOfDice(6);\n              break;\n            }\n          }\n\n          // 4 dados iguales\n          if (count[0] === 4 && count[4] === 1) {\n            // Cuatro dados de 1 y un dado de 5\n            newRollScore += 2050;\n            setNumberOfDice(6);\n            break;\n          } else if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            setNumberOfDice(1);\n            break;\n          } else if (count[4] === 4 && count[0] === 1) {\n            // Cuatro dados de 5 y un dado de 1\n            newRollScore += 1100;\n            setNumberOfDice(6);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            setNumberOfDice(1);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4 && count[0] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\n                newRollScore += (i + 1) * 200 + 100;\n                foundFourDice = true;\n                setNumberOfDice(6);\n                break;\n              } else if (i !== 4 && count[i] === 4 && count[4] === 1) {\n                // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\n                newRollScore += (i + 1) * 200 + 50;\n                foundFourDice = true;\n                setNumberOfDice(6);\n                break;\n              } else if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                setNumberOfDice(1);\n                break;\n              }\n            }\n            if (foundFourDice) {\n              break;\n            }\n          }\n\n          // Escalera\n          const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\n          const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\n          if (fiveDiceladder1 || fiveDiceladder2) {\n            // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\n            newRollScore += 1500;\n            setNumberOfDice(6);\n            break;\n          }\n\n          // 3 dados iguales\n          let fiveDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 2;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fiveDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              } else {\n                const updateDiceCount = 1;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fiveDiceThreeEq = true;\n              const updateDiceCount = 1;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n          }\n          if (fiveDiceThreeEq) {\n            if (diceCount === 5) {\n              setNumberOfDice(6);\n            } else {\n              setNumberOfDice(prevCount => prevCount - diceCount);\n              if (numberOfDice === 0) {\n                setNumberOfDice(6);\n              }\n            }\n            setDiceCount(0);\n            break;\n          }\n        case 4:\n          // 4 dados iguales\n          if (count[0] === 4) {\n            // Cuatro dados de 1\n            newRollScore += 2000;\n            setNumberOfDice(6);\n            break;\n          } else if (count[4] === 4) {\n            // Cuatro dados de 5\n            newRollScore += 1000;\n            setNumberOfDice(6);\n            break;\n          } else {\n            let foundFourDice = false;\n            for (let i = 1; i < 6; i++) {\n              if (i !== 4 && count[i] === 4) {\n                // Cuatro dados de 2, 3, 4 o 6\n                newRollScore += (i + 1) * 200;\n                foundFourDice = true;\n                break;\n              }\n            }\n            if (foundFourDice) {\n              setNumberOfDice(6);\n              break;\n            }\n          }\n\n          // 3 dados iguales\n          let fourDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 3;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 2;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              fourDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              } else {\n                const updateDiceCount = 1;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              fourDiceThreeEq = true;\n              const updateDiceCount = 1;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n          }\n          if (fourDiceThreeEq) {\n            if (diceCount === 4) {\n              setNumberOfDice(6);\n            } else {\n              setNumberOfDice(prevCount => prevCount - diceCount);\n            }\n            setDiceCount(0);\n            break;\n          }\n        case 3:\n          // 3 dados iguales\n          let threeDiceThreeEq = false;\n          for (let i = 0; i < 6; i++) {\n            if (i !== 0 && i !== 4 && count[i] === 3) {\n              // Tres dados de 2, 3, 4 o 6\n              newRollScore += (i + 1) * 100;\n              threeDiceThreeEq = true;\n              setNumberOfDice(6);\n            } else if (i === 0 && count[i] === 3) {\n              // Tres dados de 1\n              newRollScore += 1000;\n              threeDiceThreeEq = true;\n              setNumberOfDice(6);\n            } else if (i === 4 && count[i] === 3) {\n              // Tres dados de 5\n              newRollScore += 500;\n              threeDiceThreeEq = true;\n              setNumberOfDice(6);\n            }\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              threeDiceThreeEq = true;\n              const updateDiceCount = 2;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              threeDiceThreeEq = true;\n              if (i === 4 && count[i] === 2) {\n                const updateDiceCount = 2;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              } else {\n                const updateDiceCount = 1;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              threeDiceThreeEq = true;\n              const updateDiceCount = 1;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n          }\n          if (threeDiceThreeEq) {\n            if (diceCount === 3) {\n              setNumberOfDice(6);\n            } else {\n              setNumberOfDice(prevCount => prevCount - diceCount);\n            }\n            setDiceCount(0);\n            break;\n          }\n        case 2:\n          // 2 dados iguales\n          let twoDiceTh = false;\n          for (let i = 0; i < 6; i++) {\n            if (i === 0 && count[i] === 2) {\n              // Dos dados de 1\n              newRollScore += 200;\n              twoDiceTh = true;\n              setNumberOfDice(6);\n            } else if (i === 0 && count[i] === 1 || i === 4 && count[i] === 2) {\n              // Dos dados de 5 o Un dado de 1\n              newRollScore += 100;\n              twoDiceTh = true;\n              if (i === 4 && count[i] === 2) {\n                setNumberOfDice(6);\n              } else {\n                const updateDiceCount = 1;\n                setDiceCount(prevCount => prevCount + updateDiceCount);\n              }\n            } else if (i === 4 && count[i] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              twoDiceTh = true;\n              const updateDiceCount = 1;\n              setDiceCount(prevCount => prevCount + updateDiceCount);\n            }\n          }\n          if (twoDiceTh) {\n            if (diceCount === 2) {\n              setNumberOfDice(6);\n            } else {\n              setNumberOfDice(prevCount => prevCount - diceCount);\n            }\n            setDiceCount(0);\n            break;\n          }\n        case 1:\n          // 1 dado\n          let oneDiceTh = false;\n          if (diceAmount.length === 1) {\n            if (count[0] === 1) {\n              // Un dado de 1\n              newRollScore += 100;\n              oneDiceTh = true;\n            } else if (count[4] === 1) {\n              // Un dado de 5\n              newRollScore += 50;\n              oneDiceTh = true;\n            }\n          }\n          if (oneDiceTh) {\n            setNumberOfDice(6);\n            break;\n          }\n        default:\n          newRollScore += 0;\n          //setNumberOfDice(6);\n          //alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\n          break;\n      }\n      console.log(\"diceCount afuera del switch= \" + diceCount);\n      // Actualizar el puntaje total del turno y puntaje de la tirada\n      setRollScore(newRollScore);\n      setTurnScore(turnScore + newRollScore);\n\n      // Contador de tiradas\n      setRoll(roll + 1);\n    }\n  };\n  const endTurn = () => {\n    // Finalizar el turno del jugador\n\n    // Actualización de puntajes y cambio de turno\n    if (playerInGame[currentPlayerIndex]) {\n      if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed) {\n        // Actualiza los puntos si no sobrepasa el límite de puntuación\n        const newTotalScore = [...totalScore];\n        newTotalScore[currentScoreIndex] += turnScore;\n        setTotalScore(newTotalScore);\n      }\n    }\n    setCurrentPlayerIndex(prevIndex => (prevIndex + 1) % players.length);\n    setCurrentScoreIndex(prevIndex => (prevIndex + 1) % totalScore.length);\n    setTurnScore(0);\n    setRollScore(0);\n    setRoll(0);\n    setRollCondition(true);\n    setMaximumPointsSupperpassed(false);\n    setNumberOfDice(6);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 13\n    }, this), !isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-container\",\n        children: diceValues.map((value, index) => /*#__PURE__*/_jsxDEV(Dice, {\n          number: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"roll-button\",\n          onClick: rollDice,\n          disabled: !rollCondition || gameOver || maximumPointsSupperpassed,\n          children: \"Tirar los dados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"end-turn-button\",\n          onClick: endTurn,\n          disabled: gameOver,\n          children: \"Terminar turno\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rolls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentPlayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje de la tirada: \", rollScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje acumulado del turno: \", turnScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Puntaje total del jugador: \", totalScore[currentScoreIndex]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"NTBP9EtOcFoC6NSEgccDLQdfpPY=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Dice","Modal","jsxDEV","_jsxDEV","Game","_s","roll","setRoll","rollScore","setRollScore","rollCondition","setRollCondition","gameOver","setGameOver","maximumPointsSupperpassed","setMaximumPointsSupperpassed","turnScore","setTurnScore","diceValues","setDiceValues","numberOfDice","setNumberOfDice","diceCount","setDiceCount","isModalOpen","setIsModalOpen","players","setPlayers","totalScore","setTotalScore","playerInGame","setPlayerInGame","currentPlayerIndex","setCurrentPlayerIndex","currentScoreIndex","setCurrentScoreIndex","currentPlayer","handleCloseModal","handleConfirm","numPlayers","playerNames","playerScores","inGame","updatePlayerInGame","alert","updateRollCondition","updateGameState","rollDice","diceAmount","count","forEach","value","newRollScore","length","foundSixDice","i","foundFiveDice","foundFourDice","sixDiceladder1","sixDiceladder2","sixDiceladder3","countPairs","sixDiceThreeEq","updateDiceCount","prevCount","console","log","fiveDiceladder1","fiveDiceladder2","fiveDiceThreeEq","fourDiceThreeEq","threeDiceThreeEq","twoDiceTh","oneDiceTh","endTurn","newTotalScore","prevIndex","className","children","isOpen","onClose","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","map","index","number","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Jose/Desktop/Proyectos/la-batata/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dice from './Dice';\r\nimport Modal from './Modal';\r\nimport '../styles/Game.scss';\r\n\r\nconst Game = () => {\r\n    const [roll, setRoll] = useState(0);\r\n    const [rollScore, setRollScore] = useState(0);\r\n    const [rollCondition, setRollCondition] = useState(true);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [maximumPointsSupperpassed, setMaximumPointsSupperpassed] = useState(false);\r\n    const [turnScore, setTurnScore] = useState(0);\r\n    const [diceValues, setDiceValues] = useState([1, 1, 1, 1, 1, 1]);\r\n    const [numberOfDice, setNumberOfDice] = useState(6);\r\n    const [diceCount, setDiceCount] = useState(0);\r\n    const [isModalOpen, setIsModalOpen] = useState(true);\r\n    const [players, setPlayers] = useState([]);\r\n    const [totalScore, setTotalScore] = useState([]);\r\n    const [playerInGame, setPlayerInGame] = useState([]);\r\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\r\n    const [currentScoreIndex, setCurrentScoreIndex] = useState(0);\r\n\r\n    const currentPlayer = players[currentPlayerIndex];\r\n    \r\n    const handleCloseModal = () => { // Maneja la ventana de ingreso de jugadores\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleConfirm = (numPlayers, playerNames, playerScores, inGame) => { // Actualiza el estado con los nombres, puntos y estado de juego de los jugadores\r\n        setPlayers(playerNames);\r\n        setTotalScore(playerScores);\r\n        setPlayerInGame(inGame);\r\n    };\r\n\r\n    useEffect(() => { // Entrada al \"Juego\"\r\n        if (turnScore >= 700 && !playerInGame[currentPlayerIndex]) { \r\n            // El jugador ingresa al juego\r\n            const updatePlayerInGame = [...playerInGame];\r\n            updatePlayerInGame[currentPlayerIndex] = true;\r\n            setPlayerInGame(updatePlayerInGame);\r\n            alert(\"El \" + currentPlayer + \" ha entrado al juego!\");\r\n            \r\n            // Finaliza el turno para el jugador recién ingresado al juego\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n            alert(\"Tu turno ha finalizado!\");\r\n        }\r\n\r\n        // Ganar el juego\r\n        if ((totalScore[currentScoreIndex] + turnScore) === 10000) {\r\n            const updateGameState = true;\r\n            setGameOver(updateGameState);\r\n            alert(\"Felicitaciones \" + currentPlayer + \", has ganado el juego!!!\")\r\n        } else if ((totalScore[currentScoreIndex] + turnScore) > 10000) {\r\n            const updateGameState = true;\r\n            setMaximumPointsSupperpassed(updateGameState);\r\n            alert(\"Te has excedido del puntaje final pero estas muy cerca, sigue intentándolo!\");\r\n        }\r\n    }, [turnScore]);\r\n\r\n\r\n    const rollDice = () => { // Tirar los dados\r\n\r\n        // Verificar si el jugador está dentro del juego para permitir más tiradas\r\n        if (roll === 1 && turnScore < 700 &&!playerInGame[currentPlayerIndex]) {\r\n            alert(\"No puedes tirar más los dados, no estás dentro del juego\");\r\n            const updateRollCondition = false;\r\n            setRollCondition(updateRollCondition);\r\n        } else {\r\n\r\n            // Generar números aleatorios para cada dado\r\n            //const diceAmount = [...Array(numberOfDice)].map(() => Math.floor(Math.random() * 6) + 1);\r\n            const diceAmount = [6, 6, 6, 1, 5, 2];\r\n\r\n            // Actualizar valores de los dados\r\n            setDiceValues(diceAmount);\r\n    \r\n            // Contador de cada número del 1 al 6\r\n            const count = [0, 0, 0, 0, 0, 0];\r\n            diceAmount.forEach(value => {\r\n                count[value - 1]++;\r\n            });\r\n    \r\n            // Calcular puntaje de la tirada\r\n            let newRollScore = 0;\r\n    \r\n            // Puntajes según las combinaciones de dados\r\n            switch (diceAmount.length) {\r\n                \r\n                // Cada Case es la cantidad de dados tirados\r\n                case 6:\r\n                    // 6 dados iguales\r\n                    if (count[0] === 6) { // Seis dados de 1\r\n                        newRollScore += 6000;\r\n                        break;\r\n                    } else if (count[4] === 6) { // Seis dados de 5\r\n                        newRollScore += 3000;\r\n                        break;\r\n                    } else { // Seis dados de 2, 3, 4 o 6\r\n                        let foundSixDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 6) {\r\n                                newRollScore += (i + 1) * 600;\r\n                                foundSixDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundSixDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 5 dados iguales\r\n                    if (count[0] === 5 && count[4] === 1) { // Cinco dados de 1 y un dado de 5\r\n                        newRollScore += 4050;\r\n                        break;\r\n                    } else if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else if (count[4] === 5 && count[0] === 1) { // Cinco dados de 5 y un dado de 1\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5 && count[0] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 400 + 100;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5 && count[4] === 1) { // Cinco dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 400 + 50;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                setNumberOfDice(1);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 2) { // Cuatro dados de 1 y dos dados de 5\r\n                        newRollScore += 2100;\r\n                        break;\r\n                    } else if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        setNumberOfDice(2);\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 2) { // Cuatro dados de 5 y dos dados de 1\r\n                        newRollScore += 1200;\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        setNumberOfDice(2);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 1\r\n                                newRollScore += (i + 1) * 200 + 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 2) { // Cuatro dados de 2, 3, 4 o 6 y dos dados de 5\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 150;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(1);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(1);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(2);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const sixDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const sixDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n                    const sixDiceladder3 = count[0] === 1 && count[1] === 1 && count[2] === 1 && count[3] === 1 && count[4] === 1 && count[5] === 1;\r\n    \r\n                    if (sixDiceladder3) { // 1, 2, 3, 4, 5, 6\r\n                        newRollScore += 2000;\r\n                        break;    \r\n                    } else if (sixDiceladder1 && count[0] === 2) { // 1, 2, 3, 4, 5 y 1\r\n                        newRollScore += 1600;\r\n                        break;\r\n                    } else if ((sixDiceladder1 && count[4] === 2) || (sixDiceladder2 && count[4] === 2)) { // 1, 2, 3, 4, 5 y 5  o  2, 3, 4, 5, 6 y 5\r\n                        newRollScore += 1550;\r\n                        break;\r\n                    } else if ((sixDiceladder1) || (sixDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    }\r\n    \r\n                    // Tres pares de dados\r\n                    let countPairs = 0;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (count[i] === 2) {\r\n                            countPairs += 1;\r\n                        }\r\n                    }\r\n                    if (countPairs === 3) {\r\n                        newRollScore += 1500;\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let sixDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            console.log(\"Tres dados de 2, 3, 4 o 6\");\r\n                            console.log(\"diceCount = \" + diceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    // Dados 1 y 5    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            sixDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                                console.log(\"Un dado de 1\");\r\n                                console.log(\"diceCount = \" + diceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            sixDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            setDiceCount(diceCount + updateDiceCount);\r\n                            console.log(\"Un dado de 5\");\r\n                            console.log(\"diceCount = \" + diceCount);\r\n                        }\r\n                        console.log(\"diceCount al final del for = \" + diceCount);\r\n                    }\r\n                    if (sixDiceThreeEq) {\r\n                        console.log(\"diceCount = \" + diceCount);\r\n                        if (diceCount === 6) {\r\n                            setNumberOfDice(6);\r\n                        } else {\r\n                            setNumberOfDice(prevCount => prevCount - diceCount);\r\n                            console.log(\"numberOfDice = \" + numberOfDice);\r\n                            if (numberOfDice === 0) {\r\n                                setNumberOfDice(6);\r\n                            }\r\n                        }\r\n                        //setDiceCount(0);\r\n                        console.log(\"Termina\");\r\n                        break;\r\n                    }\r\n                \r\n                case 5:\r\n                    // 5 dados iguales\r\n                    if (count[0] === 5) { // Cinco dados de 1\r\n                        newRollScore += 4000;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else if (count[4] === 5) { // Cinco dados de 5\r\n                        newRollScore += 2000;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else {\r\n                        let foundFiveDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 5) { // Cinco dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 400;\r\n                                foundFiveDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFiveDice) {\r\n                            setNumberOfDice(6);\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // 4 dados iguales\r\n                    if (count[0] === 4 && count[4] === 1) { // Cuatro dados de 1 y un dado de 5\r\n                        newRollScore += 2050;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else if (count[4] === 4 && count[0] === 1) { // Cuatro dados de 5 y un dado de 1\r\n                        newRollScore += 1100;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        setNumberOfDice(1);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4 && count[0] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 1\r\n                                newRollScore += (i + 1) * 200 + 100;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(6);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4 && count[4] === 1) { // Cuatro dados de 2, 3, 4 o 6 y un dado de 5\r\n                                newRollScore += (i + 1) * 200 + 50;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(6);\r\n                                break;\r\n                            } else if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                setNumberOfDice(1);\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            break;\r\n                        }\r\n                    }\r\n    \r\n                    // Escalera\r\n                    const fiveDiceladder1 = count[0] >= 1 && count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1;\r\n                    const fiveDiceladder2 = count[1] >= 1 && count[2] >= 1 && count[3] >= 1 && count[4] >= 1 && count[5] >= 1;\r\n    \r\n                    if ((fiveDiceladder1) || (fiveDiceladder2)) { // 1, 2, 3, 4, 5  o  2, 3, 4, 5, 6\r\n                        newRollScore += 1500;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    }\r\n    \r\n                    // 3 dados iguales\r\n                    let fiveDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fiveDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fiveDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fiveDiceThreeEq) {\r\n                        if (diceCount === 5) {\r\n                            setNumberOfDice(6);\r\n                        } else {\r\n                            setNumberOfDice(prevCount => prevCount - diceCount);\r\n                            if (numberOfDice === 0) {\r\n                                setNumberOfDice(6);\r\n                            }\r\n                        }\r\n                        setDiceCount(0);\r\n                        break;\r\n                    }\r\n    \r\n                case 4:\r\n                    // 4 dados iguales\r\n                    if (count[0] === 4) { // Cuatro dados de 1\r\n                        newRollScore += 2000;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else if (count[4] === 4) { // Cuatro dados de 5\r\n                        newRollScore += 1000;\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    } else {\r\n                        let foundFourDice = false;\r\n                        for (let i = 1; i < 6; i++) {\r\n                            if (i !== 4 && count[i] === 4) { // Cuatro dados de 2, 3, 4 o 6\r\n                                newRollScore += (i + 1) * 200;\r\n                                foundFourDice = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (foundFourDice) {\r\n                            setNumberOfDice(6);\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                    // 3 dados iguales\r\n                    let fourDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 3;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            fourDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            fourDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (fourDiceThreeEq) {\r\n                        if (diceCount === 4) {\r\n                            setNumberOfDice(6);\r\n                        } else {\r\n                            setNumberOfDice(prevCount => prevCount - diceCount);\r\n                        }\r\n                        setDiceCount(0);\r\n                        break;\r\n                    }\r\n    \r\n                case 3:\r\n                    // 3 dados iguales\r\n                    let threeDiceThreeEq = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i !== 0 && i !== 4 && count[i] === 3) { // Tres dados de 2, 3, 4 o 6\r\n                            newRollScore += (i + 1) * 100;\r\n                            threeDiceThreeEq = true;\r\n                            setNumberOfDice(6);\r\n                        } else if (i === 0 && count[i] === 3) { // Tres dados de 1\r\n                            newRollScore += 1000;\r\n                            threeDiceThreeEq = true;\r\n                            setNumberOfDice(6);\r\n                        } else if (i === 4 && count[i] === 3) { // Tres dados de 5\r\n                            newRollScore += 500;\r\n                            threeDiceThreeEq = true;\r\n                            setNumberOfDice(6);\r\n                        }\r\n    \r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 2;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            threeDiceThreeEq = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                const updateDiceCount = 2;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            threeDiceThreeEq = true;\r\n                            const updateDiceCount = 1;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (threeDiceThreeEq) {\r\n                        if (diceCount === 3) {\r\n                            setNumberOfDice(6);\r\n                        } else {\r\n                            setNumberOfDice(prevCount => prevCount - diceCount);\r\n                        }\r\n                        setDiceCount(0);\r\n                        break;\r\n                    }\r\n    \r\n                case 2:\r\n                    // 2 dados iguales\r\n                    let twoDiceTh = false;\r\n                    for (let i = 0; i < 6; i++) {\r\n                        if (i === 0 && count[i] === 2) { // Dos dados de 1\r\n                            newRollScore += 200;\r\n                            twoDiceTh = true;\r\n                            setNumberOfDice(6);\r\n                        } else if ((i === 0 && count[i] === 1) || (i === 4 && count[i] === 2)) { // Dos dados de 5 o Un dado de 1\r\n                            newRollScore += 100;\r\n                            twoDiceTh = true;\r\n                            if (i === 4 && count[i] === 2) {\r\n                                setNumberOfDice(6);\r\n                            } else {\r\n                                const updateDiceCount = 1;\r\n                                setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                            }\r\n                        } else if (i === 4 && count[i] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            twoDiceTh = true;\r\n                            const updateDiceCount = 1;\r\n                            setDiceCount(prevCount => prevCount + updateDiceCount);\r\n                        }\r\n                    }\r\n                    if (twoDiceTh) {\r\n                        if (diceCount === 2) {\r\n                            setNumberOfDice(6);\r\n                        } else {\r\n                            setNumberOfDice(prevCount => prevCount - diceCount);\r\n                        }\r\n                        setDiceCount(0);\r\n                        break;\r\n                    }\r\n    \r\n                case 1:\r\n                    // 1 dado\r\n                    let oneDiceTh = false;\r\n                    if (diceAmount.length === 1) {\r\n                        if (count[0] === 1) { // Un dado de 1\r\n                            newRollScore += 100;\r\n                            oneDiceTh = true;\r\n                        } else if (count[4] === 1) { // Un dado de 5\r\n                            newRollScore += 50;\r\n                            oneDiceTh = true;\r\n                        }\r\n                    }\r\n                    if (oneDiceTh) {\r\n                        setNumberOfDice(6);\r\n                        break;\r\n                    }\r\n    \r\n                default: \r\n                    newRollScore += 0;\r\n                    //setNumberOfDice(6);\r\n                    //alert(\"¡¡¡Te hiciste puré!!! Perdiste todos los puntos de esta ronda\");\r\n                    break;\r\n            }\r\n    \r\n            console.log(\"diceCount afuera del switch= \" + diceCount);\r\n            // Actualizar el puntaje total del turno y puntaje de la tirada\r\n            setRollScore(newRollScore);\r\n            setTurnScore(turnScore + newRollScore);\r\n            \r\n            // Contador de tiradas\r\n            setRoll(roll + 1); \r\n        }\r\n    };\r\n\r\n    const endTurn = () => { // Finalizar el turno del jugador\r\n\r\n        // Actualización de puntajes y cambio de turno\r\n        if (playerInGame[currentPlayerIndex]) {\r\n            if (currentPlayerIndex === currentScoreIndex && !maximumPointsSupperpassed) { // Actualiza los puntos si no sobrepasa el límite de puntuación\r\n                const newTotalScore = [...totalScore];\r\n                newTotalScore[currentScoreIndex] += turnScore;\r\n                setTotalScore(newTotalScore);\r\n            }\r\n        }\r\n        setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % players.length);\r\n        setCurrentScoreIndex((prevIndex) => (prevIndex + 1) % totalScore.length);\r\n        setTurnScore(0);\r\n        setRollScore(0);\r\n        setRoll(0);\r\n        setRollCondition(true);\r\n        setMaximumPointsSupperpassed(false);\r\n        setNumberOfDice(6);\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <Modal \r\n                isOpen={isModalOpen} \r\n                onClose={handleCloseModal} \r\n                onConfirm={handleConfirm}\r\n            />\r\n            {!isModalOpen && (\r\n                <div>\r\n                    <div className=\"dice-container\">\r\n                        {diceValues.map((value, index) => (\r\n                            <Dice key={index} number={value} />\r\n                        ))}\r\n                    </div>\r\n                    <div className='buttons-container'>\r\n                        <button className=\"roll-button\" \r\n                            onClick={rollDice}\r\n                            disabled={!rollCondition || gameOver || maximumPointsSupperpassed}\r\n                        >\r\n                            Tirar los dados\r\n                        </button>\r\n                        <button className=\"end-turn-button\" \r\n                            onClick={endTurn}\r\n                            disabled={gameOver}\r\n                        >\r\n                            Terminar turno\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"rolls\">\r\n                        <p>{currentPlayer}</p>\r\n                        <p>Puntaje de la tirada: {rollScore}</p>\r\n                        <p>Puntaje acumulado del turno: {turnScore}</p>\r\n                        <p>Puntaje total del jugador: {totalScore[currentScoreIndex]}</p> \r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}